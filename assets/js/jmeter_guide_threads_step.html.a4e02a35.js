"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[1159],{6995:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,r]of t)i[e]=r;return i}},8122:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>a,data:()=>n});var r=i(6254);const p={},a=(0,i(6995).A)(p,[["render",function(e,t){return(0,r.uX)(),(0,r.CE)("div",null,t[0]||(t[0]=[(0,r.Fv)('<h1 id="stepping-thread-group" tabindex="-1"><a class="header-anchor" href="#stepping-thread-group"><span>Stepping Thread Group</span></a></h1><p>Stepping Thread Group：阶梯加压线程组</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><ul><li>Stepping Thread Group是第一个自定义线程组</li><li>但，随着版本的迭代，已经有更好的线程组代替Stepping Thread Group了【Concurrency Thread Group】，所以说Stepping Thread Group已经是过去式了</li><li>但，咱们还是要介绍下的滴</li></ul><h2 id="stepping-thread-group的特性" tabindex="-1"><a class="header-anchor" href="#stepping-thread-group的特性"><span>Stepping Thread Group的特性</span></a></h2><ul><li>有预览图显示估计的负载</li><li>可延迟启动线程组</li><li>可持续增加线程负载</li><li>可设置最大负载的持续运行时间</li></ul><h2 id="stepping-thread-group的作用" tabindex="-1"><a class="header-anchor" href="#stepping-thread-group的作用"><span>Stepping Thread Group的作用</span></a></h2><ul><li>减少服务器的瞬时压力，做性能测试应该逐步增加压力，而不是瞬时加压</li><li>逐步增压越平缓越好，更容易从结果看到多少压力值下，有性能瓶颈</li></ul><h2 id="stepping-thread-group参数详解" tabindex="-1"><a class="header-anchor" href="#stepping-thread-group参数详解"><span>Stepping Thread Group参数详解</span></a></h2><figure><img src="/assets/jmeter/1896874-20200507134558001-1186141310.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>**this group will start：**表示总共要启动的线程数；若设置为 100，表示总共会加载到 100 个线程</li><li>**first，wait for：**从运行之后多长时间开始启动线程；若设置为 0 秒，表示运行之后立即启动线程</li><li>**then start：**初次启动多少个线程；若设置为 0 个，表示初次不启动线程</li><li>**next add：**之后每次启动多少个线程；若设置为 10个，表示每个梯次启动 10 个线程</li><li>**threads every：**当前运行多长时间后再次启动线程，即每一次线程启动完成之后的持续时间；若设置为 30 秒，每梯次启动完线程之后再运行 30 秒</li><li>**using ramp-up：**启动线程的时间；若设置为 5 秒，表示每次启动线程都持续 5 秒（和基础线程组的ramp-up一样意思）</li><li>**then hold load for：**线程全部启动完之后持续运行多长时间，如图：设置为 60 秒，表示 100 个线程全部启动完之后再持续运行 60 秒</li><li>**finally，stop/threads every：**多长时间释放多少个线程；若设置为 5 个和 1 秒，表示持续负载结束之后每 1 秒钟释放 5 个线程</li></ul><h4 id="从负载预览图-读懂所有参数" tabindex="-1"><a class="header-anchor" href="#从负载预览图-读懂所有参数"><span>从负载预览图，读懂所有参数</span></a></h4><figure><img src="/assets/jmeter/1896874-20200507134553154-1438745374.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>从第0秒开始启动线程，每 5 秒内启动10个线程并且运行30秒，以此循环，直到一共启动了 100 个线程</li><li>当已启动 100 个线程后，持续负载运行60秒</li><li>持续负载运行60秒后，每 1 秒释放五个线程，直到全部线程被释放**【注意：线程释放过程中，线程依然在运行】**</li></ul><h2 id="结合active-threads-over-time" tabindex="-1"><a class="header-anchor" href="#结合active-threads-over-time"><span>结合Active Threads Over Time</span></a></h2><ul><li>运行Stepping Thread Group需要和Active Threads Over Time结合起来使用，这样能看到动态的阶梯加压效果</li><li>可以看到和Stepping Thread Group负载预览图基本一致，证明加压效果是正常的</li></ul><figure><img src="/assets/jmeter/1896874-20200508131041999-2147157393.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',17)]))}]]),n=JSON.parse('{"path":"/jmeter/guide/threads/step.html","title":"Stepping Thread Group","lang":"zh-CN","frontmatter":{"description":"Stepping Thread Group Stepping Thread Group：阶梯加压线程组 前言 Stepping Thread Group是第一个自定义线程组 但，随着版本的迭代，已经有更好的线程组代替Stepping Thread Group了【Concurrency Thread Group】，所以说Stepping Thread G...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/guide/threads/step.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"Stepping Thread Group"}],["meta",{"property":"og:description","content":"Stepping Thread Group Stepping Thread Group：阶梯加压线程组 前言 Stepping Thread Group是第一个自定义线程组 但，随着版本的迭代，已经有更好的线程组代替Stepping Thread Group了【Concurrency Thread Group】，所以说Stepping Thread G..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hekun97.github.io/assets/jmeter/1896874-20200507134558001-1186141310.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-28T17:43:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-28T17:43:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Stepping Thread Group\\",\\"image\\":[\\"https://hekun97.github.io/assets/jmeter/1896874-20200507134558001-1186141310.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200507134553154-1438745374.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200508131041999-2147157393.png\\"],\\"dateModified\\":\\"2025-03-28T17:43:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1743183812000,"updatedTime":1743183812000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":1,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":2.33,"words":700},"filePathRelative":"jmeter/guide/threads/step.md","localizedDate":"2025年3月28日","excerpt":"\\n<p>Stepping Thread Group：阶梯加压线程组</p>\\n<h2>前言</h2>\\n<ul>\\n<li>Stepping Thread Group是第一个自定义线程组</li>\\n<li>但，随着版本的迭代，已经有更好的线程组代替Stepping Thread Group了【Concurrency Thread Group】，所以说Stepping Thread Group已经是过去式了</li>\\n<li>但，咱们还是要介绍下的滴</li>\\n</ul>\\n<h2>Stepping Thread Group的特性</h2>\\n<ul>\\n<li>有预览图显示估计的负载</li>\\n<li>可延迟启动线程组</li>\\n<li>可持续增加线程负载</li>\\n<li>可设置最大负载的持续运行时间</li>\\n</ul>","autoDesc":true}')}}]);