"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[9435],{5601:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>r,data:()=>n});var s=i(6254);const a={},r=(0,i(6995).A)(a,[["render",function(e,t){return(0,s.uX)(),(0,s.CE)("div",null,t[0]||(t[0]=[(0,s.Fv)('<h1 id="jmeter介绍" tabindex="-1"><a class="header-anchor" href="#jmeter介绍"><span>JMeter介绍</span></a></h1><h2 id="一、jmeter面板介绍" tabindex="-1"><a class="header-anchor" href="#一、jmeter面板介绍"><span>一、JMeter面板介绍</span></a></h2><figure><img src="/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425095521117-1271559523.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_1-常用的菜单栏" tabindex="-1"><a class="header-anchor" href="#_1-常用的菜单栏"><span>1. 常用的菜单栏</span></a></h3><h4 id="分布式运行相关的-后面再展开讲解哦" tabindex="-1"><a class="header-anchor" href="#分布式运行相关的-后面再展开讲解哦"><span>分布式运行相关的，后面再展开讲解哦</span></a></h4><figure><img src="/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102038185-1305530759.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="选项-可以打开日志-修改语言-还有管理插件哦" tabindex="-1"><a class="header-anchor" href="#选项-可以打开日志-修改语言-还有管理插件哦"><span>选项，可以打开日志，修改语言，还有管理插件哦！</span></a></h4><figure><img src="/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102042872-1094187611.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="工具-主要看函数助手" tabindex="-1"><a class="header-anchor" href="#工具-主要看函数助手"><span>工具，主要看函数助手</span></a></h4><figure><img src="/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102044778-1812471518.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-常用的图标" tabindex="-1"><a class="header-anchor" href="#_2-常用的图标"><span>2. 常用的图标</span></a></h3><figure><img src="/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102500096-1182484082.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>从左往右依次是</strong></p><ul><li>新建测试计划</li><li>选择测试计划模板创建一个新的测试计划</li><li>打开jmeter脚本</li><li>保存jmeter脚本</li><li>剪切</li><li>复制（鸡肋，不如ctrl+c）</li><li>粘贴</li><li>展开目录树</li><li>收起目录树</li><li>禁用或启用元件</li><li>本机开始运行当前测试计划</li><li>立即开始在本机运行当前测试计划</li><li>停止</li><li>关闭</li><li>清除</li><li>清除全部</li><li>查找</li><li>清除查找</li><li>函数助手对话框</li><li>帮助</li></ul><h3 id="_3-查看日志" tabindex="-1"><a class="header-anchor" href="#_3-查看日志"><span>3. 查看日志</span></a></h3><ul><li>如果是黄色感叹号则是正常的，如果是红色数字的代表有问题**【显示的数字是多少呢，warnings/errors 数量就是多少】**</li><li>点击可以查看日志**【这个日志是Jmeter工具使用加载信息的日志，并不是测试脚本运行的日志】**</li></ul><figure><img src="/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200426105144727-1175118119.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-查看错误报告" tabindex="-1"><a class="header-anchor" href="#_4-查看错误报告"><span>4. 查看错误报告</span></a></h3><p>jmeter会在 jmeter.log 文件中记录warn和error信息，而 jmeter.log 在bin目录下</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>倘若测试脚本的执行结果并不是你想要的，可以尝试在 jmeter.log 中找一找，比如：调用函数但语法错误</li><li>当然，取样器（Sampler）的错误结果一般是不会记录到 jmeter.log ，比如：请求404</li></ul></div><h2 id="二、-jmeter主要元件和组件介绍" tabindex="-1"><a class="header-anchor" href="#二、-jmeter主要元件和组件介绍"><span>二、 JMeter主要元件和组件介绍</span></a></h2><h3 id="_1-目标" tabindex="-1"><a class="header-anchor" href="#_1-目标"><span>1. 目标</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1. 熟悉JMeter的主要元件和组件</span></span>\n<span class="line"><span>2. 元件的类型与各自的功能</span></span>\n<span class="line"><span>3. 熟悉元件之间彼此作用域</span></span>\n<span class="line"><span>4. 掌握元件执行顺序</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-线程组" tabindex="-1"><a class="header-anchor" href="#_2-线程组"><span>2. 线程组</span></a></h3><p>线程组元件是所有测试计划的入口。所有的取样器和控制器必须放在线程组下。一个线程组可以看作一个虚拟用户池，其中的每个线程都可以理解为一个虚拟用户，多个虚拟用户同时去执行相同的一批次任务。每个线程之间都是隔离的，互不影响的。一个线程的执行过程中，操作的变量不会影响其他线程的变量值。</p><h3 id="_3-元件和组件的基本介绍" tabindex="-1"><a class="header-anchor" href="#_3-元件和组件的基本介绍"><span>3. 元件和组件的基本介绍</span></a></h3><ul><li>元件：多个类似功能组件的容器（类似于JAVA类）；</li><li>组件：实现独立的某个功能（类似于JAVA方法）。</li></ul><img src="/assets/jmeter/202402291137631.png" alt="元件和组件" style="zoom:50%;"><h4 id="_1-取样器" tabindex="-1"><a class="header-anchor" href="#_1-取样器"><span>（1）取样器</span></a></h4><p>取样器是用来模拟用户操作的，是向服务器发送请求、接收服务器响应数据的运行单元。取样器是包含在线程组内部的组件，因此它必须在线程组中添加。JMeter原生支持多种不同的取样器，如TCP取样器、HTTP请求、FTP请求、JDBC请求、Java请求等，每一种不同类型的取样器根据设置的参数向服务器发出不同类型的请求。</p><h4 id="_2-逻辑控制器" tabindex="-1"><a class="header-anchor" href="#_2-逻辑控制器"><span>（2）逻辑控制器</span></a></h4><p>JMeter 逻辑控制器可以对元件的执行逻辑进行控制，JMeter 官网是这样解释的：「Logic Controllers determine the order in which Samplers are processed」。也就是说逻辑控制器可以控制采样器(samplers)的执行顺序，因此控制器需要和采样器一起使用。除仅一次控制器外，其他逻辑控制器可以相互嵌套。</p><p>JMeter 中的逻辑控制器主要分为两类：</p><ul><li>控制测试计划执行过程中节点的逻辑执行顺序，如：循环控制器、If 控制器等；</li><li>对测试计划中的脚本进行分组、方便 JMeter 统计执行结果以及进行脚本的运行时控制等，如：吞吐量控制器、事务控制器。</li></ul><h4 id="_3-监听器" tabindex="-1"><a class="header-anchor" href="#_3-监听器"><span>（3）监听器</span></a></h4><p>监听器是用于对测试结果数据进行处理和可视化展示的一系列元件。察看结果树、 图形结果、聚合报告等都是我们经常用到的监听器组件。</p><h4 id="_4-配置元件" tabindex="-1"><a class="header-anchor" href="#_4-配置元件"><span>（4）配置元件</span></a></h4><p>配置元件用于提供对静态数据配置的支持。它可以定义在测试计划层级下，也可以定义在线程组或取样器层级下，定义在不同层级，作用域也不同。配置元件主要有用户自定义变量、CSV数据文件设置、TCP取样器配置、HTTP Cookie管理器等。</p><h4 id="_5-断言" tabindex="-1"><a class="header-anchor" href="#_5-断言"><span>（5）断言</span></a></h4><p>断言即检查接口的返回是否符合预期。断言是自动化测试脚本中举足轻重的一环，因此要十分重视。</p><p>JMeter 常用断言主要有响应断言（Response Assertion）、JSON断言（JSON Assertion）、大小断言（Size Assertion）、断言持续时间（Duration Assertion）、beanshell 断言（Beanshell Assertion）等，我们经常要用到的有 JSON断言、响应断言、断言持续时间。</p><h4 id="_6-定时器" tabindex="-1"><a class="header-anchor" href="#_6-定时器"><span>（6）定时器</span></a></h4><p>在性能测试中，访问请求之间的停顿时间被称之为思考时间。在实际操作中，停顿时间可以是内容查找、阅读等花费的时间，而定时器正是用来模拟这种停顿时间。其中：</p><ul><li>同一作用域下的所有定时器优先于 取样器之前执行。</li><li>如果希望定时器仅应用于其中一个取样器，则把定时器加入到该取样器的子节点。</li></ul><table><thead><tr><th>定时器</th><th>说明</th></tr></thead><tbody><tr><td>固定定时器（Constant Timer）</td><td></td></tr><tr><td>统一随机定时器（Uniform Random Timer）</td><td></td></tr><tr><td>精准吞吐量定时器（Precise Throughput Timer）</td><td></td></tr><tr><td>常数吞吐量定时器（Constant Throughput Timer）</td><td></td></tr><tr><td>高斯随机定时器（Gaussian Random Timer）</td><td></td></tr><tr><td>JSR223 定时器（JSR223 Timer）</td><td></td></tr><tr><td>泊松随机定时器（Poisson Random Timer）</td><td></td></tr><tr><td>同步定时器（Synchronizing Timer）</td><td></td></tr><tr><td>BeanShell 脚本编写定时器（BeanShell Timer）</td><td></td></tr></tbody></table><h4 id="_7-前置处理器和后置处理器" tabindex="-1"><a class="header-anchor" href="#_7-前置处理器和后置处理器"><span>（7）前置处理器和后置处理器</span></a></h4><p>前置处理器是取样器请求之前执行一些操作，经常用于在取样器请求运行前修改参数，设置环境变量，或更新未从响应文本中提取的变量。</p><p>同样的，后置处理器是在取样器请求之后执行一些操作。有时候服务器的响应数据在后续请求中需要用到，我们就需要对这些响应数据进行处理。比如获取响应中的token，在后续请求中使用以进行身份验证，这时就会使用后置处理器。</p><h3 id="_4-元件作用域" tabindex="-1"><a class="header-anchor" href="#_4-元件作用域"><span>4. 元件作用域</span></a></h3><p>在JMeter中，元件的作用域是靠测试计划的树形结构中元件的父子关系来确定的。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>核心是取样器，其他组件都是以取样器为核心运行的，组件添加的位置不同，生效的取样器也不同。</p></div><h2 id="三、-jmeter的属性和变量" tabindex="-1"><a class="header-anchor" href="#三、-jmeter的属性和变量"><span>三、 JMeter的属性和变量</span></a></h2><p>JMeter的属性和变量可以简单理解为编程里面的全局变量和局部变量。</p><p>属性是全局可见，可以跨线程组传递调用，而变量基本上只能存在于一个线程组中（在测试计划定义的变量也是可以跨线程组传递的）。</p><ul><li>同线程组内的数据传递一般用变量，例如，存放一个临时的过程值。</li><li>多个进程组共用的一般用属性，例如，登录操作的session（token）值需要传给其他线程组用，避免每个线程组都还要做一次登录操作。</li></ul>',55)]))}]]),n=JSON.parse('{"path":"/jmeter/basic/intro.html","title":"JMeter介绍","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["JMeter"],"tag":["介绍"],"order":4,"sticky":true,"description":"JMeter介绍 一、JMeter面板介绍 imgimg 1. 常用的菜单栏 分布式运行相关的，后面再展开讲解哦 imgimg 选项，可以打开日志，修改语言，还有管理插件哦！ imgimg 工具，主要看函数助手 imgimg 2. 常用的图标 imgimg 从左往右依次是 新建测试计划 选择测试计划模板创建一个新的测试计划 打开jmeter脚本 保存j...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/basic/intro.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"JMeter介绍"}],["meta",{"property":"og:description","content":"JMeter介绍 一、JMeter面板介绍 imgimg 1. 常用的菜单栏 分布式运行相关的，后面再展开讲解哦 imgimg 选项，可以打开日志，修改语言，还有管理插件哦！ imgimg 工具，主要看函数助手 imgimg 2. 常用的图标 imgimg 从左往右依次是 新建测试计划 选择测试计划模板创建一个新的测试计划 打开jmeter脚本 保存j..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425095521117-1271559523.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-23T15:55:08.000Z"}],["meta",{"property":"article:tag","content":"介绍"}],["meta",{"property":"article:modified_time","content":"2025-03-23T15:55:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JMeter介绍\\",\\"image\\":[\\"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425095521117-1271559523.png\\",\\"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102038185-1305530759.png\\",\\"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102042872-1094187611.png\\",\\"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102044778-1812471518.png\\",\\"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102500096-1182484082.png\\",\\"https://hekun97.github.io/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200426105144727-1175118119.png\\"],\\"dateModified\\":\\"2025-03-23T15:55:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1742745308000,"updatedTime":1742745308000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":1,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":6.25,"words":1876},"filePathRelative":"jmeter/basic/intro.md","localizedDate":"2025年3月23日","excerpt":"\\n<h2>一、JMeter面板介绍</h2>\\n<figure><img src=\\"/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425095521117-1271559523.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<h3>1. 常用的菜单栏</h3>\\n<h4>分布式运行相关的，后面再展开讲解哦</h4>\\n<figure><img src=\\"/Users/hk/Documents/my-docs/src/.vuepress/public/assets/jmeter/1896874-20200425102038185-1305530759.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>","autoDesc":true}')},6995:(e,t)=>{t.A=(e,t)=>{const i=e.__vccOpts||e;for(const[e,s]of t)i[e]=s;return i}}}]);