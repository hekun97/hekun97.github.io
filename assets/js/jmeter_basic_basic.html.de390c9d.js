"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[4895],{2323:(t,r,n)=>{n.r(r),n.d(r,{comp:()=>o,data:()=>l});var e=n(6254);const i={class:"hint-container tip"},s={},o=(0,n(6995).A)(s,[["render",function(t,r){const n=(0,e.g2)("RouteLink");return(0,e.uX)(),(0,e.CE)("div",null,[r[10]||(r[10]=(0,e.Fv)('<h1 id="性能测试基础" tabindex="-1"><a class="header-anchor" href="#性能测试基础"><span>性能测试基础</span></a></h1><p>理解性能测试基础是学习性能测试工具的前提。以下是核心概念和知识的详细展开，帮助新手建立系统性认知：</p><hr><h2 id="一、-性能测试的核心目标" tabindex="-1"><a class="header-anchor" href="#一、-性能测试的核心目标"><span><strong>一、 性能测试的核心目标</strong></span></a></h2><ul><li><strong>验证系统能力</strong>：系统能否在预期用户量和请求量下正常运行？</li><li><strong>发现性能瓶颈</strong>：CPU、内存、磁盘 I/O、网络、数据库、代码等环节是否存在瓶颈？</li><li><strong>评估稳定性</strong>：高负载或长时间运行下，系统是否会出现崩溃、内存泄漏等问题？</li><li><strong>优化依据</strong>：通过测试结果指导开发、运维团队进行调优。</li></ul><hr><h2 id="二、性能测试的主要类型" tabindex="-1"><a class="header-anchor" href="#二、性能测试的主要类型"><span><strong>二、性能测试的主要类型</strong></span></a></h2><table><thead><tr><th><strong>测试类型</strong></th><th><strong>定义</strong>和场景</th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>基准测试</strong></td><td>单用户、单请求场景下的性能基线（Baseline）。</td><td>测试一个用户登录接口的响应时间。</td></tr><tr><td><strong>负载测试</strong></td><td>逐步增加并发用户数，观察系统在预期负载下的表现。</td><td>模拟 1000 用户同时浏览商品页，持续 10 分钟。</td></tr><tr><td><strong>压力测试</strong></td><td>超过系统预期负载（如 2 倍用户量），测试系统的极限和故障恢复能力。</td><td>5000 用户同时抢购限量商品，观察系统是否崩溃。</td></tr><tr><td><strong>并发测试</strong></td><td>验证多用户同时操作同一功能时的正确性。如：抢红包、抢购、秒杀活动、库存扣减等。</td><td>100 用户同时提交同一商品的订单。</td></tr><tr><td><strong>稳定性测试</strong></td><td>长时间运行（如 24 小时、一周）下，系统资源使用是否平稳，有无内存泄漏。</td><td>持续模拟 500 用户在线，检查内存占用趋势。</td></tr><tr><td><strong>容量测试</strong></td><td>确定系统能支撑的最大用户量或数据量，关注系统在极限情况下的各种极限参数值。如：数据库存储上限，最大TPS，最大连接数，最大并发数，最多数据条数等。</td><td>逐步增加用户数，直到系统响应时间超过阈值。</td></tr></tbody></table>',8)),(0,e.Lk)("div",i,[r[9]||(r[9]=(0,e.Lk)("p",{class:"hint-container-title"},"提示",-1)),(0,e.Lk)("ul",null,[(0,e.Lk)("li",null,[r[1]||(r[1]=(0,e.eW)("不同的测试类型的详细内容，可参考：")),(0,e.bF)(n,{to:"/jmeter/sundry/test_type.html"},{default:(0,e.k6)((()=>r[0]||(r[0]=[(0,e.eW)("详解性能测试类型")]))),_:1}),r[2]||(r[2]=(0,e.eW)("。"))]),(0,e.Lk)("li",null,[r[4]||(r[4]=(0,e.eW)("性能测试中")),r[5]||(r[5]=(0,e.Lk)("strong",null,"服务器资源",-1)),r[6]||(r[6]=(0,e.eW)("、")),r[7]||(r[7]=(0,e.Lk)("strong",null,"用户数",-1)),r[8]||(r[8]=(0,e.eW)("或其他的性能指标如何变化，可参考：")),(0,e.bF)(n,{to:"/jmeter/sundry/curve_model.html"},{default:(0,e.k6)((()=>r[3]||(r[3]=[(0,e.eW)("性能测试曲线模型")]))),_:1})])])]),r[11]||(r[11]=(0,e.Fv)('<hr><h2 id="三、关键性能指标-kpis" tabindex="-1"><a class="header-anchor" href="#三、关键性能指标-kpis"><span><strong>三、关键性能指标（KPIs）</strong></span></a></h2><p>包括响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率。</p><h3 id="_1-用户感知指标" tabindex="-1"><a class="header-anchor" href="#_1-用户感知指标"><span><strong>1. 用户感知指标</strong></span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>从用户角度出发，软件使用是否卡顿、好用、体验流畅、能返回正确的信息。</p></div><h4 id="_1-响应时间-response-time" tabindex="-1"><a class="header-anchor" href="#_1-响应时间-response-time"><span>（1）响应时间（Response Time）</span></a></h4><ul><li>定义：从发送请求到接收完整响应的时间（通常包含网络延迟）。</li><li>细分：可分解为服务器处理时间、数据库查询时间、网络传输时间等。</li><li>示例：用户点击“支付”按钮后，平均 2 秒收到支付成功提示。</li></ul><h4 id="_2-并发用户数-number-of-concurrent-users" tabindex="-1"><a class="header-anchor" href="#_2-并发用户数-number-of-concurrent-users"><span>（2）<strong>并发用户数（Number of concurrent users）</strong></span></a></h4><ul><li><p>定义：某一物理时刻同时向系统提交请求的用户数。</p></li><li><p>示例：淘宝当前正在使用系统的用户数：500万。</p></li></ul><h4 id="_3-吞吐量-throughput" tabindex="-1"><a class="header-anchor" href="#_3-吞吐量-throughput"><span>（3）吞吐量（Throughput）</span></a></h4><ul><li><p>定义：单位时间内系统处理的请求数（如请求数/秒）。 衡量服务器性能好坏的直接指标。</p></li><li><p>从不同维度来衡量吞吐量：</p><ul><li>业务维度：业务数/秒，业务数/小时，业务数/天</li><li>网络维度：字节数/秒，字节数/小时，字节数/天；</li><li>技术维度：TPS（每秒事务数）、QPS（每秒请求数）。</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><ol><li><p><strong>QPS</strong>：</p><ul><li>定义：服务器每秒钟处理的接口请求数量。</li><li>解释：一个服务器中有多个接口，QPS指的是在同一个单位时间内的接口处理数量之和。</li><li>示例：5次支付操作（3个接口请求），服务器的QPS为15。</li></ul></li><li><p><strong>TPS</strong>：</p><ul><li>定义：服务器每秒钟处理的事务请求数量。</li><li>解释：一个事务通常指的是界面上的一个操作，一个事务可以包含一个或者多个接口请求。</li><li>示例：5次支付操作（3个接口请求），服务器的TPS为5。</li></ul></li></ol></div><h4 id="_5-错误率-error-rate" tabindex="-1"><a class="header-anchor" href="#_5-错误率-error-rate"><span>（5）错误率（Error Rate）</span></a></h4><ul><li>定义：失败请求数占总请求数的百分比。</li><li>常见错误：HTTP 5xx 服务器错误、超时、业务逻辑错误（如库存不足未处理）。</li></ul><h4 id="_6-点击数-number-of-hits" tabindex="-1"><a class="header-anchor" href="#_6-点击数-number-of-hits"><span>（6）点击数（number of hits）</span></a></h4><ul><li><p>定义：点击数不是指在页面上的一次点击，页面（html代码、图片、js...）加载时，向服务器发送的请求数量，可以用每秒点击数来衡量web服务器的处理能力。</p></li><li><p>示例：登录操作，支持1000人同时点击登录，除了登录请求，还会发送请求其它的资源的请求。</p></li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><ul><li><p>点击数是衡量Web服务器处理能力的一个重要指标。</p></li><li><p>只有web项目才有此指标。</p></li></ul></div><h3 id="_2-系统资源指标" tabindex="-1"><a class="header-anchor" href="#_2-系统资源指标"><span><strong>2. 系统资源指标</strong></span></a></h3><ul><li><strong>CPU 利用率</strong>：超过 80% 可能成为瓶颈（需结合上下文，如计算密集型任务可能合理）。</li><li><strong>内存占用</strong>：持续增长可能提示内存泄漏。</li><li><strong>磁盘 I/O</strong>：频繁读写可能导致延迟（如数据库未合理索引）。</li><li><strong>网络带宽</strong>：吞吐量受限于网络带宽（如大文件上传场景）。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常，没有特殊需求的话。</p><ol><li><p>建议CPU不高于88%（±5）；</p><p>在电脑里的所有处理请求（操作系统运行、软件程序、磁盘拷贝等） 都由CPU完成。</p></li><li><p>内存不高于80% ；</p><p>所有程序在运行时要消耗的空间，（存储程序运行的数据）。</p></li><li><p>磁盘不高于90%；</p><p>需预留空间存储本地数据文件。</p></li><li><p>网络不高于80%；</p><p>影响数据在网络中的传输速度。</p></li></ol></div><hr><h2 id="四、常见性能问题" tabindex="-1"><a class="header-anchor" href="#四、常见性能问题"><span><strong>四、常见性能问题</strong></span></a></h2><table><thead><tr><th><strong>问题类型</strong></th><th><strong>表现与原因</strong></th><th><strong>解决方法</strong></th></tr></thead><tbody><tr><td><strong>慢 SQL 查询</strong></td><td>数据库响应时间长，CPU 或 I/O 占用高。</td><td>优化 SQL 语句，添加索引，分库分表。</td></tr><tr><td><strong>线程阻塞</strong></td><td>线程池满，请求排队等待（如数据库连接池不足）。</td><td>调整线程池大小，优化锁机制。</td></tr><tr><td><strong>缓存失效</strong></td><td>缓存击穿/穿透导致大量请求直接访问数据库。</td><td>使用布隆过滤器、设置热点数据永不过期。</td></tr><tr><td><strong>外部服务瓶颈</strong></td><td>第三方 API 响应慢（如支付接口）。</td><td>增加超时设置，引入熔断机制（如 Hystrix）。</td></tr><tr><td><strong>资源竞争</strong></td><td>多线程共享资源（如全局变量）导致死锁或数据不一致。</td><td>使用原子操作、分布式锁（如 Redis Lock）。</td></tr></tbody></table><hr><h2 id="五、学习方法建议" tabindex="-1"><a class="header-anchor" href="#五、学习方法建议"><span><strong>五、学习方法建议</strong></span></a></h2><ol><li><p><strong>理论结合实践</strong></p><ul><li>阅读《性能测试从零开始》等书籍，理解基础概念。</li><li>动手搭建简单系统（如 Spring Boot + MySQL），模拟性能问题并修复。</li></ul></li><li><p><strong>观察与分析</strong></p><ul><li>使用工具监控资源：Windows 用 <code>PerfMon</code>，Linux 用 <code>top</code>、<code>vmstat</code>、<code>nmon</code>。</li><li>可视化集群监控软件：<code>Prometheus</code>+<code>Grafana</code>。</li><li>分析日志：通过日志定位慢请求（如 Nginx 的 <code>access.log</code>）。</li></ul></li><li><p><strong>对比不同场景</strong></p><ul><li>对比单机与集群部署的性能差异。</li><li>测试有无缓存时的吞吐量变化。</li></ul></li></ol><hr><h2 id="六、基础工具入门" tabindex="-1"><a class="header-anchor" href="#六、基础工具入门"><span><strong>六、基础工具入门</strong></span></a></h2><ul><li><strong>JMeter</strong>：后续学习的核心工具，支持 HTTP、JDBC、JMS 等协议。</li><li><strong>Postman</strong>：手动测试 API 功能，辅助调试。</li><li><strong>Grafana + Prometheus</strong>：监控服务器资源并可视化。</li></ul><hr><h2 id="七、典型问题思考" tabindex="-1"><a class="header-anchor" href="#七、典型问题思考"><span><strong>七、典型问题思考</strong></span></a></h2><ul><li><strong>为什么响应时间正常，但用户仍感觉“卡顿”？</strong><br> → 可能是前端资源加载慢（如未压缩的图片或 JavaScript 文件）。</li><li><strong>TPS 达到峰值后为何突然下降？</strong><br> → 可能触发了系统限流，或数据库连接池耗尽。</li><li><strong>如何区分网络延迟和服务端延迟？</strong><br> → 使用 <code>curl -w</code> 分析各阶段时间，或通过浏览器开发者工具查看 Waterfall 图。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Waterfall的内容后续学习。</p></div><hr><p>掌握这些基础后，再学习 JMeter 时会更容易理解其设计逻辑（如线程组模拟用户、定时器控制请求频率）。后续可结合具体项目，从简单接口逐步过渡到复杂场景的压测。</p>',35))])}]]),l=JSON.parse('{"path":"/jmeter/basic/basic.html","title":"性能测试基础","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["性能测试"],"tag":["基础","介绍"],"order":1,"sticky":true,"description":"性能测试基础 理解性能测试基础是学习性能测试工具的前提。以下是核心概念和知识的详细展开，帮助新手建立系统性认知： 一、 性能测试的核心目标 验证系统能力：系统能否在预期用户量和请求量下正常运行？ 发现性能瓶颈：CPU、内存、磁盘 I/O、网络、数据库、代码等环节是否存在瓶颈？ 评估稳定性：高负载或长时间运行下，系统是否会出现崩溃、内存泄漏等问题？ 优化...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/basic/basic.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"性能测试基础"}],["meta",{"property":"og:description","content":"性能测试基础 理解性能测试基础是学习性能测试工具的前提。以下是核心概念和知识的详细展开，帮助新手建立系统性认知： 一、 性能测试的核心目标 验证系统能力：系统能否在预期用户量和请求量下正常运行？ 发现性能瓶颈：CPU、内存、磁盘 I/O、网络、数据库、代码等环节是否存在瓶颈？ 评估稳定性：高负载或长时间运行下，系统是否会出现崩溃、内存泄漏等问题？ 优化..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-23T15:55:08.000Z"}],["meta",{"property":"article:tag","content":"基础"}],["meta",{"property":"article:tag","content":"介绍"}],["meta",{"property":"article:modified_time","content":"2025-03-23T15:55:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能测试基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-23T15:55:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1742139779000,"updatedTime":1742745308000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":2,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":6.74,"words":2023},"filePathRelative":"jmeter/basic/basic.md","localizedDate":"2025年3月16日","excerpt":"\\n<p>理解性能测试基础是学习性能测试工具的前提。以下是核心概念和知识的详细展开，帮助新手建立系统性认知：</p>\\n<hr>\\n<h2><strong>一、 性能测试的核心目标</strong></h2>\\n<ul>\\n<li><strong>验证系统能力</strong>：系统能否在预期用户量和请求量下正常运行？</li>\\n<li><strong>发现性能瓶颈</strong>：CPU、内存、磁盘 I/O、网络、数据库、代码等环节是否存在瓶颈？</li>\\n<li><strong>评估稳定性</strong>：高负载或长时间运行下，系统是否会出现崩溃、内存泄漏等问题？</li>\\n<li><strong>优化依据</strong>：通过测试结果指导开发、运维团队进行调优。</li>\\n</ul>","autoDesc":true}')},6995:(t,r)=>{r.A=(t,r)=>{const n=t.__vccOpts||t;for(const[t,e]of r)n[t]=e;return n}}}]);