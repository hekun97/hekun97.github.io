"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[2112],{483:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>i,data:()=>d});var r=a(6254);const n={},i=(0,a(6995).A)(n,[["render",function(t,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="详解-http-request" tabindex="-1"><a class="header-anchor" href="#详解-http-request"><span>详解 HTTP Request</span></a></h1><h2 id="http-request-介绍" tabindex="-1"><a class="header-anchor" href="#http-request-介绍"><span>HTTP Request 介绍</span></a></h2><p>用来发送 HTTP、HTTPS 协议请求</p><h2 id="http-request-界面" tabindex="-1"><a class="header-anchor" href="#http-request-界面"><span>HTTP Request 界面</span></a></h2><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200618184506345-301273000.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200618184506345-301273000-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><table><thead><tr><th>字段名</th><th>作用</th></tr></thead><tbody><tr><td>名称</td><td>不多介绍啦，建议自定义一个识别度高的名称</td></tr><tr><td>注释</td><td>对于测试<strong>没有任何影响</strong>，仅记录作用</td></tr><tr><td>协议</td><td>http或https，大小写**不敏感****默认：**http</td></tr><tr><td>服务器名称或IP</td><td>服务器 host 或者 ip，**不包括协议****比如：**<a href="http://www.baidu.com" target="_blank" rel="noopener noreferrer">www.baidu.com</a>、192.168.196.128</td></tr><tr><td>端口号</td><td>目标服务器的端口号，**默认：**80</td></tr><tr><td>方法</td><td>发送 http 请求的方法</td></tr><tr><td>路径</td><td>目标请求的 URL 路径不包括<strong>协议、host、ip、端口</strong></td></tr><tr><td>内容编码</td><td>请求的编码方式，**默认：**iso8859</td></tr><tr><td>自动重定向</td><td>发出的请求的响应码是<strong>3*</strong>*，会自动跳转到新目标页面只记录最终页面的返回结果</td></tr><tr><td>跟随重定向</td><td>和自动重定向<strong>唯一不同</strong>的是：会记录重定向过程中的的<strong>所有请求</strong>的响应结果</td></tr><tr><td>使用 KeepAlive</td><td>jmeter 和目标服务器之间使用 Keep-Alive 方式进行 HTTP 通信真正做性能测试强烈建议不勾选</td></tr><tr><td>对POST使用multipart/form-data</td><td>post 请求需要上传文件时勾选</td></tr><tr><td>与浏览器兼容的头</td><td>当勾选 multipart/form-data 时，勾选此项http请求头中的 Content-Type 和Content-Transfer-Encoding 被忽略而只发送 Content-Disposition 部分</td></tr></tbody></table><h3 id="parameters-讲解" tabindex="-1"><a class="header-anchor" href="#parameters-讲解"><span>Parameters 讲解</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619092841859-1465317993.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619092841859-1465317993-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Name</td><td>参数名</td></tr><tr><td>Value</td><td>参数值</td></tr><tr><td>URL Encode?</td><td>是否要 URL 编码？**重点：**如果参数值包含了中文、特殊字符（非数字字母以外），最好勾上，当然全都勾上最稳妥</td></tr><tr><td>Content-Type</td><td>参数值的资源类型**默认：**text/plain</td></tr><tr><td>Include Equals?</td><td>当你的参数值<strong>为空</strong>的时候，可以选择不包含=，默认勾选如果参数值<strong>不为空</strong>，则不可以取消勾选</td></tr></tbody></table><h4 id="什么是-url-编码" tabindex="-1"><a class="header-anchor" href="#什么是-url-编码"><span>什么是 URL 编码</span></a></h4><ul><li>URL 编码解码**，<strong>又叫</strong>百分号编码**，是统一资源定位（URL）的编码方式</li><li>URL 地址（常说网址）规定了数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（ / , : @ 等），剩下的其它所有字符必须通过 %xx 编码处理</li><li>编码方法很简单，在该字符ascii码的的16进制字符前面加**%**，如空格字符，ascii码是32，对应16进制是20，那么 urlencode 编码结果是 %20</li></ul><h4 id="url-编码的栗子" tabindex="-1"><a class="header-anchor" href="#url-编码的栗子"><span>URL 编码的栗子</span></a></h4><p>直接在网上搜在线 URL 编解码</p><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619100342047-649455746.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619100342047-649455746-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="include-equals-的栗子" tabindex="-1"><a class="header-anchor" href="#include-equals-的栗子"><span>include equals 的栗子</span></a></h4><p>参数值为空，且勾选 Include equals</p><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619094234231-970701581.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619094234231-970701581-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>参数值为空，但不勾选 Include equals</p><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619094259268-1310572448.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619094259268-1310572448-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>其实说的就是等于号而已，一般也不会传空值，即使传了也会带上=</p><h3 id="body-data-讲解" tabindex="-1"><a class="header-anchor" href="#body-data-讲解"><span>Body Data 讲解</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619092846508-892345099.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619092846508-892345099-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><ul><li>没啥好说的，传 json 字符串就行了，注意下格式，后面再讲具体栗子</li><li>**不过倒有个重点：**如果 Parameters 有参数列表的话，是无法切换到 Body Data 的哦</li></ul><h3 id="files-upload-讲解" tabindex="-1"><a class="header-anchor" href="#files-upload-讲解"><span>Files Upload 讲解</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619092851102-978099268.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619092851102-978099268-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>File Path</td><td>文件的本地路径</td></tr><tr><td>Parameter Name</td><td>参数名</td></tr><tr><td>MIME Type</td><td>资源媒体类型</td></tr></tbody></table><h4 id="常见资源媒体类型" tabindex="-1"><a class="header-anchor" href="#常见资源媒体类型"><span>常见资源媒体类型</span></a></h4><table><thead><tr><th>类型</th><th>文件后缀</th><th>格式</th></tr></thead><tbody><tr><td>超文本标记语言文本</td><td>.html</td><td>text/html</td></tr><tr><td>普通文本</td><td>.txt</td><td>text/plain</td></tr><tr><td>XML 文件</td><td>.xml</td><td>text/xml</td></tr><tr><td>PNG 图片</td><td>.png</td><td>image/png</td></tr><tr><td>GIF</td><td>.gif</td><td>image/gif</td></tr><tr><td>JPEG 图片</td><td>.jpeg、jpg</td><td>image/jpeg</td></tr></tbody></table><table><thead><tr><th>类型</th><th>文件后缀</th><th>格式</th></tr></thead><tbody><tr><td>表单中进行文件上传</td><td></td><td>multipart/form-data</td></tr><tr><td>表单默认提交数据的格式</td><td></td><td>application/x-www-form-urlencoded</td></tr><tr><td>XML 数据格式</td><td></td><td>application/xml</td></tr><tr><td>JSON 数据格式</td><td></td><td>application/json</td></tr><tr><td>PDF 文件</td><td>.pdf</td><td>application/pdf</td></tr><tr><td>RTF 文本</td><td>.rtf</td><td>application/rtf</td></tr><tr><td>GZIP 文件</td><td>.gz</td><td>application/x-gzip</td></tr><tr><td>TAR 文件</td><td>.tar</td><td>application/x-tar</td></tr><tr><td>AVI 文件</td><td>.avi</td><td>video/x-msvideo</td></tr><tr><td>MPEG 文件</td><td>.mpg、.mpeg</td><td>video/mpeg</td></tr></tbody></table><h2 id="不同的content-type在jmeter中如何输入参数" tabindex="-1"><a class="header-anchor" href="#不同的content-type在jmeter中如何输入参数"><span><strong>不同的content-type在jmeter中如何输入参数</strong></span></a></h2><h4 id="前提" tabindex="-1"><a class="header-anchor" href="#前提"><span>前提</span></a></h4><p>因为是需要真实接口进行测试的，这里提供两种方案</p><ul><li>自己用 Flask 框架开发了本地的接口进行测试， 如果有需要的同学进群领取哦：870155189</li><li>或者进入 <a href="http://open.yesapi.cn/?r=user/registration&amp;from=wx_837493986%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%B3%A8%E5%86%8C%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%BC%84%E4%B8%AA%E5%85%8D%E8%B4%B9%E4%BC%9A%E5%91%98%EF%BC%8C%E6%9C%89%E5%9C%A8%E7%BA%BF%E5%85%8D%E8%B4%B9%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%8F%90%E4%BE%9B%E6%B5%8B%E8%AF%95%E5%93%A6" target="_blank" rel="noopener noreferrer">http://open.yesapi.cn/?r=user/registration&amp;from=wx_837493986，直接注册个账号，弄个免费会员，有在线免费的接口提供测试哦</a></li></ul><h3 id="application-x-www-form-urlencoded-的栗子" tabindex="-1"><a class="header-anchor" href="#application-x-www-form-urlencoded-的栗子"><span>application/x-www-form-urlencoded 的栗子</span></a></h3><p>**备注：**也是表单提交最常见的栗子</p><h4 id="parameters-方式传参" tabindex="-1"><a class="header-anchor" href="#parameters-方式传参"><span>Parameters 方式传参</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619112006231-845142310.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619112006231-845142310-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619112014583-2079471286.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619112014583-2079471286-3169333.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ul><li>最终表单的参数列表会拼接到 URL 中，所以如果包含了中文、特殊字符就要勾选**编码？**哦</li><li>这里<strong>不可以</strong>通过 Body Data 传递参数哦，会无法识别到参数，已实践过（即使加了 HTTP请求头也不行），乖乖用 Parameters 的方式传参</li></ul><h3 id="content-type-application-json-的栗子" tabindex="-1"><a class="header-anchor" href="#content-type-application-json-的栗子"><span><strong>content-type:application/json 的栗子</strong></span></a></h3><h4 id="body-data-方式传参" tabindex="-1"><a class="header-anchor" href="#body-data-方式传参"><span>Body Data 方式传参</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619114801973-747495881.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619114801973-747495881.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="添加-http请求头" tabindex="-1"><a class="header-anchor" href="#添加-http请求头"><span>添加 HTTP请求头</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619114810004-1920152392.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619114810004-1920152392.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="请求体" tabindex="-1"><a class="header-anchor" href="#请求体"><span>请求体</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619114906653-974702726.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619114906653-974702726.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="请求头" tabindex="-1"><a class="header-anchor" href="#请求头"><span>请求头</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619114909610-846940152.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619114909610-846940152.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h4><p>重点就是添加 HTTP请求头，指明 Content-type 是 json 格式</p><h3 id="content-type-multipart-form-data" tabindex="-1"><a class="header-anchor" href="#content-type-multipart-form-data"><span><strong>content-type:multipart/form-data</strong></span></a></h3><p>**重点：**用于 post 请求，需要文件上传的场景；记住不是 get 请求</p><h4 id="请求参数列表" tabindex="-1"><a class="header-anchor" href="#请求参数列表"><span>请求参数列表</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619124802449-187358843.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619124802449-187358843.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>如果选了 get 方法的话，文件参数是不会生效哦</p><h4 id="文件参数" tabindex="-1"><a class="header-anchor" href="#文件参数"><span>文件参数</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619124807439-766791767.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619124807439-766791767.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="请求体-1" tabindex="-1"><a class="header-anchor" href="#请求体-1"><span>请求体</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619124834783-962729328.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619124834783-962729328.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="重点" tabindex="-1"><a class="header-anchor" href="#重点"><span>重点</span></a></h4><ul><li>如果添加了 HTTP请求头，请务必不要添加 content-type : multipart/form-data</li><li><strong>如果加了的话：<strong>那么所有的</strong>请求参数</strong>都会被当成<strong>文件以二进制形式传输</strong>，我们 parameters 里的文本格式参数就不会被识别，接口会提示参数为空</li></ul><h2 id="http-request-advance" tabindex="-1"><a class="header-anchor" href="#http-request-advance"><span>HTTP Request Advance</span></a></h2><p>说实话我还没用过这部分的内容，不过还是得了解下每个配置项是什么意思哦</p><figure><a href="https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200619131056137-1380612100.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200619131056137-1380612100.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h3 id="client-implemention-和-timeouts" tabindex="-1"><a class="header-anchor" href="#client-implemention-和-timeouts"><span>Client implemention 和 Timeouts</span></a></h3><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>implementation</td><td>发送http请求的方式，可选项为 java、HttpClient4（默认）</td></tr><tr><td>Connect</td><td>连接超时时间，单位毫秒</td></tr><tr><td>Respones</td><td>响应等待超时时间，单位毫秒</td></tr></tbody></table><h3 id="embedded-resources-from-html-files" tabindex="-1"><a class="header-anchor" href="#embedded-resources-from-html-files"><span>Embedded Resources from HTML Files</span></a></h3><ul><li>从HTML文件获取所有内含的资源</li><li>jmeter 在发出的 HTTP请求获得响应的 HTML文件内容后，对 HTML进行解析并获取HTML中包含的所有资源（图片、flash等）</li></ul><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Retrieve All Embedded Resources</td><td>发送http请求的方式，可选项为 java、HttpClient4（默认）</td></tr><tr><td>Parallel downloadds. Number</td><td>是否使用自设资源处。启用后可以设置资源池大小，默认为6</td></tr><tr><td>URLs must match</td><td>URL 匹配过滤，填写此项则只会下载与此内容项匹配的 url 的资源</td></tr></tbody></table><h3 id="source-address" tabindex="-1"><a class="header-anchor" href="#source-address"><span>Source address</span></a></h3><p>只用于 HTTP协议且 implemention = HttpClient4 时</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>IP/Hostname</td><td>IP /主机名以使用特定的IP地址或（本地）主机名</td></tr><tr><td>Device</td><td>选择设备以选择该接口的第一个可用地址，该设备可以是IPv4或IPv6</td></tr><tr><td>Device IPv4</td><td>选择IPv4设备来选择名称设备的IPv4地址（如eth0, lo, em0）</td></tr><tr><td>Device IPv6</td><td>选择IPv6设备来选择名称设备的IPv6地址（如eth0, lo, em0）</td></tr></tbody></table><h3 id="proxy-server" tabindex="-1"><a class="header-anchor" href="#proxy-server"><span>Proxy Server</span></a></h3><p>代理服务器</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Server Name or IP</td><td>代理服务器的名称或者IP地址</td></tr><tr><td>Port Number</td><td>代理服务器的端口号</td></tr><tr><td>Username</td><td>代理服务器的用户名</td></tr><tr><td>Password</td><td>代理服务器的密码</td></tr></tbody></table>',76)]))}]]),d=JSON.parse('{"path":"/jmeter/guide/controllers/samplers/http_request/intro.html","title":"详解 HTTP Request","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["JMeter"],"tag":["request","samplers","hhtp"],"order":1,"sticky":true,"description":"详解 HTTP Request HTTP Request 介绍 用来发送 HTTP、HTTPS 协议请求 HTTP Request 界面 imgimg Parameters 讲解 imgimg 什么是 URL 编码 URL 编码解码**，又叫百分号编码**，是统一资源定位（URL）的编码方式 URL 地址（常说网址）规定了数字，字母可以直接使用，另外一...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/guide/controllers/samplers/http_request/intro.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"详解 HTTP Request"}],["meta",{"property":"og:description","content":"详解 HTTP Request HTTP Request 介绍 用来发送 HTTP、HTTPS 协议请求 HTTP Request 界面 imgimg Parameters 讲解 imgimg 什么是 URL 编码 URL 编码解码**，又叫百分号编码**，是统一资源定位（URL）的编码方式 URL 地址（常说网址）规定了数字，字母可以直接使用，另外一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hekun97.github.io/assets/jmeter/1896874-20200618184506345-301273000-3169333.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-28T17:43:32.000Z"}],["meta",{"property":"article:tag","content":"request"}],["meta",{"property":"article:tag","content":"samplers"}],["meta",{"property":"article:tag","content":"hhtp"}],["meta",{"property":"article:modified_time","content":"2025-03-28T17:43:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"详解 HTTP Request\\",\\"image\\":[\\"https://hekun97.github.io/assets/jmeter/1896874-20200618184506345-301273000-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619092841859-1465317993-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619100342047-649455746-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619094234231-970701581-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619094259268-1310572448-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619092846508-892345099-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619092851102-978099268-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619112006231-845142310-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619112014583-2079471286-3169333.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619114801973-747495881.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619114810004-1920152392.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619114906653-974702726.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619114909610-846940152.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619124802449-187358843.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619124807439-766791767.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619124834783-962729328.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200619131056137-1380612100.png\\"],\\"dateModified\\":\\"2025-03-28T17:43:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1743183812000,"updatedTime":1743183812000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":1,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":6.06,"words":1819},"filePathRelative":"jmeter/guide/controllers/samplers/http_request/intro.md","localizedDate":"2025年3月28日","excerpt":"\\n<h2>HTTP Request 介绍</h2>\\n<p>用来发送 HTTP、HTTPS 协议请求</p>\\n<h2>HTTP Request 界面</h2>\\n<figure><a href=\\"https://img2020.cnblogs.com/blog/1896874/202006/1896874-20200618184506345-301273000.png\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"/assets/jmeter/1896874-20200618184506345-301273000-3169333.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"></a><figcaption>img</figcaption></figure>","autoDesc":true}')},6995:(t,e)=>{e.A=(t,e)=>{const a=t.__vccOpts||t;for(const[t,r]of e)a[t]=r;return a}}}]);