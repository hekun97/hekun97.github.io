"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[6364],{6995:(l,e)=>{e.A=(l,e)=>{const t=l.__vccOpts||l;for(const[l,i]of e)t[l]=i;return t}},9557:(l,e,t)=>{t.r(e),t.d(e,{comp:()=>n,data:()=>o});var i=t(6254);const r={},n=(0,t(6995).A)(r,[["render",function(l,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<p>学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议：</p><hr><h2 id="阶段-1-基础入门" tabindex="-1"><a class="header-anchor" href="#阶段-1-基础入门"><span><strong>阶段 1：基础入门</strong></span></a></h2><ol><li><strong>理解性能测试基础</strong><ul><li>性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。</li><li>核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。</li><li>常见性能问题：内存泄漏、线程阻塞、数据库锁等。</li></ul></li><li><strong>JMeter概述</strong><ul><li>JMeter支持哪些测试场景？</li><li>JMeter有哪些特征？</li><li>JMetert的扩展性体现在哪里？</li><li>JMeter实际使用场景</li></ul></li><li><strong>JMeter 安装与配置</strong><ul><li>下载并安装 Java（JMeter 依赖 Java 环境）。</li><li>下载 JMeter 并解压，更改语言为中文，配置环境变量（可选）。</li><li>熟悉JMeter目录结构。</li></ul></li><li><strong>启动 JMeter GUI</strong>。 <ul><li>熟悉 JMeter GUI界面布局。</li><li>熟悉元件和组件。</li><li>熟悉变量和属性。</li></ul></li><li><strong>第一个测试计划</strong><ul><li>创建线程组（Thread Group）并配置并发用户数、循环次数。</li><li>添加 HTTP 请求元件，配置协议、服务器地址、路径。</li><li>添加监听器（如 View Results Tree、Summary Report）查看结果。</li></ul></li></ol><hr><h2 id="阶段-2-核心功能学习" tabindex="-1"><a class="header-anchor" href="#阶段-2-核心功能学习"><span><strong>阶段 2：核心功能学习</strong></span></a></h2><ol><li><p><strong>JMeter 核心元件</strong></p><ul><li><strong>逻辑控制器</strong>：If Controller、Loop Controller、Transaction Controller。</li><li><strong>配置元件</strong>：HTTP Request Defaults、CSV Data Set Config（参数化）。</li><li><strong>前置/后置处理器</strong>：Regular Expression Extractor（关联参数）、JDBC PostProcessor。</li><li><strong>断言</strong>：响应断言、持续时间断言。</li><li><strong>定时器</strong>：Constant Timer、Gaussian Random Timer（模拟用户等待）。</li></ul></li><li><p><strong>参数化与动态数据</strong></p><ul><li>使用 CSV 文件实现参数化（如多用户登录）。</li><li>通过函数助手（__Random、__time）生成动态数据。</li><li>利用变量和属性（Properties）跨线程组传递数据。</li></ul></li><li><p><strong>监听器与结果分析</strong></p><ul><li>常用监听器：Aggregate Report、Response Time Graph、HTML Dashboard。</li><li>生成 HTML 报告：<code>jmeter -n -t test.jmx -l result.jtl -e -o report/</code>。</li><li>分析关键指标：平均响应时间、90% Line、错误率。</li></ul></li></ol><hr><h2 id="阶段-3-脚本开发与调试" tabindex="-1"><a class="header-anchor" href="#阶段-3-脚本开发与调试"><span><strong>阶段 3：脚本开发与调试</strong></span></a></h2><ol><li><p><strong>复杂场景设计</strong></p><ul><li>混合场景：模拟登录、浏览、下单等组合操作。</li><li>分布式测试：使用多台机器作为 JMeter 压力机（Master-Slave 模式）。</li><li>使用逻辑控制器实现条件分支（如用户是否登录成功）。</li></ul></li><li><p><strong>关联与动态数据处理</strong></p><ul><li>提取 JSON/XML 响应中的动态值（如 Token）并传递给后续请求。</li><li>使用正则表达式或 JSON Extractor 实现动态关联。</li></ul></li><li><p><strong>调试与优化</strong></p><ul><li>使用 Debug Sampler 查看变量和参数。</li><li>禁用监听器以减少资源消耗（正式压测时避免使用 View Results Tree）。</li><li>调整 JVM 参数优化 JMeter 自身性能。</li></ul></li></ol><hr><h2 id="阶段-4-高级应用" tabindex="-1"><a class="header-anchor" href="#阶段-4-高级应用"><span><strong>阶段 4：高级应用</strong></span></a></h2><ol><li><p><strong>分布式测试与云压测</strong></p><ul><li>配置多台 JMeter Slave 机器，通过 Master 控制。</li><li>使用云服务（如 AWS、BlazeMeter）进行大规模压测。</li></ul></li><li><p><strong>持续集成（CI/CD）</strong></p><ul><li>集成 Jenkins：通过 Jenkins 插件自动执行 JMeter 脚本。</li><li>生成趋势报告并与团队共享。</li></ul></li><li><p><strong>扩展功能</strong></p><ul><li>编写自定义 BeanShell/Groovy 脚本（如复杂逻辑处理）。</li><li>开发 JMeter 插件（如自定义监听器或取样器）。</li><li>使用 JSR223 脚本提升性能（优先选 Groovy）。</li></ul></li></ol><hr><h2 id="阶段-5-实战与优化" tabindex="-1"><a class="header-anchor" href="#阶段-5-实战与优化"><span><strong>阶段 5：实战与优化</strong></span></a></h2><ol><li><p><strong>典型场景实战</strong></p><ul><li><strong>Web 应用压测</strong>：处理 Cookies、Session、动态资源（CSS/JS）。</li><li><strong>API 压测</strong>：RESTful API、GraphQL、WebSocket。</li><li><strong>数据库压测</strong>：通过 JDBC 压测 SQL 性能。</li><li><strong>消息队列测试</strong>：集成 Kafka/RabbitMQ。</li></ul></li><li><p><strong>瓶颈定位与调优</strong></p><ul><li>结合监控工具（如 Grafana + Prometheus）分析服务器资源。</li><li>使用 JProfiler 或 Arthas 分析 Java 应用性能。</li><li>优化代码、SQL 查询、缓存策略或硬件配置。</li></ul></li></ol><hr><h2 id="学习资源推荐" tabindex="-1"><a class="header-anchor" href="#学习资源推荐"><span><strong>学习资源推荐</strong></span></a></h2><ul><li><strong>官方文档</strong>：<a href="https://jmeter.apache.org/usermanual/index.html" target="_blank" rel="noopener noreferrer">JMeter User Manual</a></li><li><strong>教程</strong>： <ul><li>Udemy 课程《JMeter Performance Testing》</li><li>YouTube 频道：JMeter Tutorials by The Testing Academy</li></ul></li><li><strong>书籍</strong>： <ul><li>《JMeter Cookbook》</li><li>《Performance Testing with JMeter 5》</li></ul></li><li><strong>社区</strong>： <ul><li>JMeter 官方论坛、Stack Overflow、GitHub 开源项目。</li></ul></li></ul><hr><h2 id="常见避坑指南" tabindex="-1"><a class="header-anchor" href="#常见避坑指南"><span><strong>常见避坑指南</strong></span></a></h2><ul><li>避免在 GUI 模式下执行压测（使用命令行模式：<code>jmeter -n -t test.jmx -l log.jtl</code>）。</li><li>线程数设置需逐步递增，避免瞬间高并发导致服务崩溃。</li><li>使用 CSV 文件参数化时，注意文件路径和编码格式。</li><li>压测前关闭不必要的监听器，减少内存占用。</li></ul><hr><p>通过以上路线逐步实践，配合项目实战（如电商秒杀、API 高并发场景），可以系统掌握 JMeter 性能测试的核心能力。</p>',24)]))}]]),o=JSON.parse('{"path":"/jmeter/","title":"性能测试","lang":"zh-CN","frontmatter":{"title":"性能测试","icon":"lightbulb","index":false,"category":["Jmeter","性能测试"],"tag":["学习路线"],"description":"学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议： 阶段 1：基础入门 理解性能测试基础 性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。 核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。 常见性能问题：内存泄漏、线程阻塞、数据库锁等。 JMeter概述...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"性能测试"}],["meta",{"property":"og:description","content":"学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议： 阶段 1：基础入门 理解性能测试基础 性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。 核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。 常见性能问题：内存泄漏、线程阻塞、数据库锁等。 JMeter概述..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-23T15:55:08.000Z"}],["meta",{"property":"article:tag","content":"学习路线"}],["meta",{"property":"article:modified_time","content":"2025-03-23T15:55:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"性能测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-23T15:55:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1742139779000,"updatedTime":1742745308000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":2,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":3.69,"words":1107},"filePathRelative":"jmeter/README.md","localizedDate":"2025年3月16日","excerpt":"<p>学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议：</p>\\n<hr>\\n<h2><strong>阶段 1：基础入门</strong></h2>\\n<ol>\\n<li><strong>理解性能测试基础</strong>\\n<ul>\\n<li>性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。</li>\\n<li>核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。</li>\\n<li>常见性能问题：内存泄漏、线程阻塞、数据库锁等。</li>\\n</ul>\\n</li>\\n<li><strong>JMeter概述</strong>\\n<ul>\\n<li>JMeter支持哪些测试场景？</li>\\n<li>JMeter有哪些特征？</li>\\n<li>JMetert的扩展性体现在哪里？</li>\\n<li>JMeter实际使用场景</li>\\n</ul>\\n</li>\\n<li><strong>JMeter 安装与配置</strong>\\n<ul>\\n<li>下载并安装 Java（JMeter 依赖 Java 环境）。</li>\\n<li>下载 JMeter 并解压，更改语言为中文，配置环境变量（可选）。</li>\\n<li>熟悉JMeter目录结构。</li>\\n</ul>\\n</li>\\n<li><strong>启动 JMeter GUI</strong>。\\n<ul>\\n<li>熟悉 JMeter GUI界面布局。</li>\\n<li>熟悉元件和组件。</li>\\n<li>熟悉变量和属性。</li>\\n</ul>\\n</li>\\n<li><strong>第一个测试计划</strong>\\n<ul>\\n<li>创建线程组（Thread Group）并配置并发用户数、循环次数。</li>\\n<li>添加 HTTP 请求元件，配置协议、服务器地址、路径。</li>\\n<li>添加监听器（如 View Results Tree、Summary Report）查看结果。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);