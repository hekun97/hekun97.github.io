"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[71],{6879:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>l});var t=a(6254);const n={},e=(0,a(6995).A)(n,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,s[0]||(s[0]=[(0,t.Fv)('<h1 id="等待及动态元素处理" tabindex="-1"><a class="header-anchor" href="#等待及动态元素处理"><span>等待及动态元素处理</span></a></h1><h2 id="一、隐式等待-implicit-wait" tabindex="-1"><a class="header-anchor" href="#一、隐式等待-implicit-wait"><span><strong>一、隐式等待（Implicit Wait）</strong></span></a></h2><h4 id="_1-定义与特点" tabindex="-1"><a class="header-anchor" href="#_1-定义与特点"><span><strong>1. 定义与特点</strong></span></a></h4><ul><li><strong>全局生效</strong>：对所有 <code>find_element</code> 和 <code>find_elements</code> 操作生效。</li><li><strong>固定超时</strong>：设置一次后，后续所有元素查找均等待至元素出现或超时。</li><li><strong>简单但低效</strong>：无法针对不同元素设置特定条件（如可见、可点击）。</li></ul><h4 id="_2-使用示例" tabindex="-1"><a class="header-anchor" href="#_2-使用示例"><span><strong>2. 使用示例</strong></span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> webdriver</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">driver </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> webdriver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Chrome</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">driver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">implicitly_wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 全局隐式等待 10 秒</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查找元素时，若未立即找到，最多等待 10 秒</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">element </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> driver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find_element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;username&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-注意事项" tabindex="-1"><a class="header-anchor" href="#_3-注意事项"><span><strong>3. 注意事项</strong></span></a></h4><ul><li><strong>超时机制</strong>：若元素在设定时间内未找到，抛出 <code>NoSuchElementException</code>。</li><li><strong>混合使用风险</strong>：与显式等待同时使用时，实际等待时间可能叠加（如隐式10秒 + 显式15秒 = 25秒）。</li></ul><hr><h2 id="二、显式等待-explicit-wait" tabindex="-1"><a class="header-anchor" href="#二、显式等待-explicit-wait"><span><strong>二、显式等待（Explicit Wait）</strong></span></a></h2><h4 id="_1-定义与特点-1" tabindex="-1"><a class="header-anchor" href="#_1-定义与特点-1"><span><strong>1. 定义与特点</strong></span></a></h4><ul><li><strong>条件触发</strong>：针对特定元素或条件等待（如元素可见、可点击）。</li><li><strong>灵活精准</strong>：可自定义超时时间、轮询间隔及预期条件。</li><li><strong>推荐场景</strong>：处理动态加载元素（AJAX）、弹窗、页面跳转等。</li></ul><h4 id="_2-核心组件" tabindex="-1"><a class="header-anchor" href="#_2-核心组件"><span><strong>2. 核心组件</strong></span></a></h4><ul><li><strong><code>WebDriverWait</code></strong>：设置最长等待时间与轮询间隔（默认0.5秒）。</li><li><strong><code>expected_conditions（EC）</code></strong>：提供多种预定义条件（如元素可见、文本存在）。</li></ul><h4 id="_3-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-使用示例"><span><strong>3. 使用示例</strong></span></a></h4><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium.webdriver.support.ui </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> WebDriverWait</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium.webdriver.support </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expected_conditions </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> EC</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium.webdriver.common.by </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> By</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等待元素可见（最长15秒，轮询间隔0.5秒）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">element </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    EC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">visibility_of_element_located</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;submit-btn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-常用-expected-conditions" tabindex="-1"><a class="header-anchor" href="#_4-常用-expected-conditions"><span><strong>4. 常用 Expected Conditions</strong></span></a></h4><table><thead><tr><th><strong>条件方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>presence_of_element_located</code></td><td>元素存在于 DOM（未必可见）</td></tr><tr><td><code>visibility_of_element_located</code></td><td>元素可见且宽高 &gt; 0</td></tr><tr><td><code>element_to_be_clickable</code></td><td>元素可见且可点击</td></tr><tr><td><code>text_to_be_present_in_element</code></td><td>元素包含特定文本</td></tr><tr><td><code>alert_is_present</code></td><td>存在弹窗</td></tr><tr><td><code>frame_to_be_available_and_switch_to</code></td><td>Frame 可用并自动切换</td></tr></tbody></table><hr><h2 id="三、动态元素处理策略" tabindex="-1"><a class="header-anchor" href="#三、动态元素处理策略"><span><strong>三、动态元素处理策略</strong></span></a></h2><h4 id="_1-动态加载元素" tabindex="-1"><a class="header-anchor" href="#_1-动态加载元素"><span><strong>1. 动态加载元素</strong></span></a></h4><ul><li><p><strong>场景</strong>：AJAX 请求后加载的元素。</p></li><li><p><strong>方案</strong>：使用显式等待确保元素就绪。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等待表格数据加载完成</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    EC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">presence_of_element_located</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">XPATH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;//table//tr&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-元素属性动态变化" tabindex="-1"><a class="header-anchor" href="#_2-元素属性动态变化"><span><strong>2. 元素属性动态变化</strong></span></a></h4><ul><li><p><strong>场景</strong>：元素的类名、文本等属性随时间变化。</p></li><li><p><strong>方案</strong>：自定义等待条件。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等待元素类名包含 &quot;active&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> class_contains_active</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">driver</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    element </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> driver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find_element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;status&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;active&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> element.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_attribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;class&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(class_contains_active)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-弹窗处理" tabindex="-1"><a class="header-anchor" href="#_3-弹窗处理"><span><strong>3. 弹窗处理</strong></span></a></h4><ul><li><p><strong>场景</strong>：异步弹窗（如操作成功提示）。</p></li><li><p><strong>方案</strong>：等待弹窗出现并处理。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等待弹窗出现并点击确认</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">EC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">alert_is_present</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">alert </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> driver.switch_to.alert</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">alert.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">accept</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="四、最佳实践" tabindex="-1"><a class="header-anchor" href="#四、最佳实践"><span><strong>四、最佳实践</strong></span></a></h2><ol><li><p><strong>优先显式等待</strong>：针对关键操作设置条件，避免无效等待。</p></li><li><p><strong>合理设置超时</strong>：根据网络/应用性能调整（通常10-30秒）。</p></li><li><p><strong>禁用隐式等待</strong>：在显式等待前设置 <code>driver.implicitly_wait(0)</code>。</p></li><li><p><strong>异常处理</strong>：捕获 <code>TimeoutException</code> 并记录日志或截图。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium.common.exceptions </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TimeoutException</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    element </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">EC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">element_to_be_clickable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> TimeoutException:</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;元素未找到！&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    driver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">save_screenshot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;timeout.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h2 id="五、强制等待-time-sleep" tabindex="-1"><a class="header-anchor" href="#五、强制等待-time-sleep"><span>五、强制等待（time.sleep）</span></a></h2><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1. 定义</span></a></h3><ul><li><strong>定义</strong>：Python 标准库 <code>time</code> 提供的固定时长等待方法，<strong>无条件暂停脚本执行，让代码休眠，不做任何的操作</strong>。</li><li><strong>语法</strong>：<code>time.sleep(seconds)</code>，参数为等待的秒数（可接受浮点数，如 <code>0.5</code> 表示 500ms）。</li></ul><h3 id="_2-典型使用场景" tabindex="-1"><a class="header-anchor" href="#_2-典型使用场景"><span>2. 典型使用场景</span></a></h3><ol><li><p><strong>调试辅助</strong>：在脚本开发阶段手动观察页面变化：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">driver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">find_element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;button&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 暂停2秒，肉眼确认点击后的页面变化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>非交互型等待</strong>：等待与页面元素无关的操作完成：</p><ul><li><p>第三方 API 响应（如验证码服务、数据库中的值）。</p><blockquote><p>被测试网址需要时间发起请求去后台获取数据库中的值，如果不进行强制等待，在显示等待的5秒内只要找到该元素，将直接去获取他的文本值，这时候的值为&#39;空&#39;。</p></blockquote></li><li><p>文件上传/下载（需固定时间确保完成）。</p></li><li><p>动画效果播放（如 CSS 过渡动画）。</p></li></ul></li><li><p><strong>绕过无法检测的条件</strong>：某些特殊场景无法通过显式等待检测：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等待页面跳转（旧页面元素已消失，新页面元素未加载）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">driver.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 强制等待新页面加载</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h3 id="_3-核心缺点" tabindex="-1"><a class="header-anchor" href="#_3-核心缺点"><span><strong>3. 核心缺点</strong></span></a></h3><table><thead><tr><th><strong>问题</strong></th><th><strong>说明</strong></th><th><strong>示例后果</strong></th></tr></thead><tbody><tr><td><strong>效率低下</strong></td><td>固定等待时间，无论实际需求是否满足</td><td>页面1秒加载完成，仍等待5秒 → 浪费4秒</td></tr><tr><td><strong>测试脆弱性</strong></td><td>环境波动（如网络延迟）易导致超时失败</td><td>设置5秒，实际加载需6秒 → 脚本报错</td></tr><tr><td><strong>掩盖问题</strong></td><td>隐藏真实的性能或逻辑缺陷</td><td>通过增加等待绕过元素定位问题</td></tr><tr><td><strong>不可维护</strong></td><td>时间参数散落代码各处，调整困难</td><td>修改等待时间需全局搜索替换</td></tr></tbody></table><hr><h3 id="_4-替代方案与最佳实践" tabindex="-1"><a class="header-anchor" href="#_4-替代方案与最佳实践"><span><strong>4. 替代方案与最佳实践</strong></span></a></h3><ol><li><strong>优先使用显式等待</strong>：精准等待元素就绪。</li><li><strong>结合显式等待 + 少量 sleep</strong></li><li>动态计算等待时间：</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium.webdriver.support.ui </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> WebDriverWait</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> selenium.webdriver.support </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expected_conditions </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> EC</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 等待元素可点击，最多等10秒（实际就绪后立即继续）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">element </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    EC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">element_to_be_clickable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;submit-btn&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-结合显式等待-少量-sleep" tabindex="-1"><a class="header-anchor" href="#_2-结合显式等待-少量-sleep"><span><strong>2. 结合显式等待 + 少量 sleep</strong></span></a></h4><ul><li><strong>处理特殊异步逻辑</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 先确保元素存在，再短暂固定等待</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">WebDriverWait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">until</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    EC</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">presence_of_element_located</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((By.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;progress-bar&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 确保进度条动画完成</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_3-动态计算等待时间" tabindex="-1"><a class="header-anchor" href="#_3-动态计算等待时间"><span><strong>3. 动态计算等待时间</strong></span></a></h4><ul><li><strong>根据历史数据调整等待</strong>：<div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">avg_load_time </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2.5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 平均加载时间（可从日志统计）</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(avg_load_time </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 留出 50% 缓冲</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="六、何时使用-time-sleep" tabindex="-1"><a class="header-anchor" href="#六、何时使用-time-sleep"><span><strong>六、何时使用 <code>time.sleep()</code>？</strong></span></a></h2><ul><li><strong>临时调试</strong>：快速验证脚本逻辑，后续替换为显式等待。</li><li><strong>不可控依赖</strong>：如第三方服务响应时间不可预测。</li><li><strong>视觉验证需求</strong>：需人工介入观察的测试步骤。</li></ul><hr><h2 id="七、三种等待机制对比" tabindex="-1"><a class="header-anchor" href="#七、三种等待机制对比"><span><strong>七、三种等待机制对比</strong></span></a></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>强制等待 <code>time.sleep()</code></strong></th><th><strong>隐式等待 <code>implicitly_wait</code></strong></th><th><strong>显式等待 <code>WebDriverWait</code></strong></th></tr></thead><tbody><tr><td><strong>控制粒度</strong></td><td>全局固定等待</td><td>全局元素查找等待</td><td>单元素/条件精准等待</td></tr><tr><td><strong>灵活性</strong></td><td>无</td><td>低（仅监测元素是否存在，可见性等不确定）</td><td>高（支持自定义多种条件「可见、可点击等」）</td></tr><tr><td><strong>适用场景</strong></td><td>调试、非交互操作</td><td>简单静态页面</td><td>动态加载、复杂交互</td></tr><tr><td><strong>执行效率</strong></td><td>低</td><td>中（可能因全局等待导致额外延迟）</td><td>高（更高效，精准控制等待逻辑）</td></tr><tr><td><strong>代码可维护性</strong></td><td>差</td><td>中</td><td>优</td></tr></tbody></table><hr><h2 id="八、总结" tabindex="-1"><a class="header-anchor" href="#八、总结"><span><strong>八、总结</strong></span></a></h2><ul><li><strong>隐式等待</strong>：适合简单场景，但缺乏灵活性。</li><li><strong>显式等待</strong>：处理动态元素的黄金标准，需结合 <code>WebDriverWait</code> 和 <code>expected_conditions</code>。</li><li><strong>动态元素处理</strong>：通过条件等待确保元素就绪，提升测试稳定性。</li><li>**强制等待：**95% 的场景应使用显式等待替代 <code>time.sleep()</code>，若必须使用，注释明确原因并集中管理时间参数。</li></ul><p>掌握这些技巧，可显著减少因元素加载问题导致的测试失败！ 🚀</p>',56)]))}]]),l=JSON.parse('{"path":"/auto/se/advanced/wait.html","title":"等待及动态元素处理","lang":"zh-CN","frontmatter":{"description":"等待及动态元素处理 一、隐式等待（Implicit Wait） 1. 定义与特点 全局生效：对所有 find_element 和 find_elements 操作生效。 固定超时：设置一次后，后续所有元素查找均等待至元素出现或超时。 简单但低效：无法针对不同元素设置特定条件（如可见、可点击）。 2. 使用示例 3. 注意事项 超时机制：若元素在设定时间...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/auto/se/advanced/wait.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"等待及动态元素处理"}],["meta",{"property":"og:description","content":"等待及动态元素处理 一、隐式等待（Implicit Wait） 1. 定义与特点 全局生效：对所有 find_element 和 find_elements 操作生效。 固定超时：设置一次后，后续所有元素查找均等待至元素出现或超时。 简单但低效：无法针对不同元素设置特定条件（如可见、可点击）。 2. 使用示例 3. 注意事项 超时机制：若元素在设定时间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-10T16:33:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-10T16:33:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"等待及动态元素处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-10T16:33:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1741624426000,"updatedTime":1741624426000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":1,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":5.64,"words":1692},"filePathRelative":"auto/se/advanced/wait.md","localizedDate":"2025年3月10日","excerpt":"\\n<h2><strong>一、隐式等待（Implicit Wait）</strong></h2>\\n<h4><strong>1. 定义与特点</strong></h4>\\n<ul>\\n<li><strong>全局生效</strong>：对所有 <code>find_element</code> 和 <code>find_elements</code> 操作生效。</li>\\n<li><strong>固定超时</strong>：设置一次后，后续所有元素查找均等待至元素出现或超时。</li>\\n<li><strong>简单但低效</strong>：无法针对不同元素设置特定条件（如可见、可点击）。</li>\\n</ul>","autoDesc":true}')},6995:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}}}]);