"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[1413],{3882:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>h});var e=a(6254);const t={},n=(0,a(6995).A)(t,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令"><span>执行命令</span></a></h1><p>以下是 <strong>pytest 执行命令的详细指南</strong>，涵盖目录、模块、用例筛选及常用参数组合，助你精准控制测试范围：</p><hr><h3 id="一、基础执行命令" tabindex="-1"><a class="header-anchor" href="#一、基础执行命令"><span><strong>一、基础执行命令</strong></span></a></h3><h4 id="_1-运行所有测试" tabindex="-1"><a class="header-anchor" href="#_1-运行所有测试"><span><strong>1. 运行所有测试</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>默认行为</strong>：递归查找当前目录及子目录中所有 <code>test_*.py</code> 和 <code>*_test.py</code> 文件，执行其中以 <code>test_</code> 开头的函数/方法。</li></ul><h4 id="_2-指定测试目录" tabindex="-1"><a class="header-anchor" href="#_2-指定测试目录"><span><strong>2. 指定测试目录</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 执行 tests 目录下的所有测试</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> src/tests/api</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 指定嵌套目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-指定测试模块" tabindex="-1"><a class="header-anchor" href="#_3-指定测试模块"><span><strong>3. 指定测试模块</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/test_login.py</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 单文件</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/test_</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.py</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               # 通配符匹配多个文件</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;tests/old tests/test_api.py&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 路径含空格时用引号包裹</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-指定测试类-方法" tabindex="-1"><a class="header-anchor" href="#_4-指定测试类-方法"><span><strong>4. 指定测试类/方法</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/test_user.py::TestUser</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 类中的所有测试</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/test_api.py::test_get_token</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # 单个函数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/db/test_models.py::TestUser::test_create</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 类中的特定方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="二、精准筛选测试用例" tabindex="-1"><a class="header-anchor" href="#二、精准筛选测试用例"><span><strong>二、精准筛选测试用例</strong></span></a></h3><h4 id="_1-按名称模糊匹配-k" tabindex="-1"><a class="header-anchor" href="#_1-按名称模糊匹配-k"><span><strong>1. 按名称模糊匹配（<code>-k</code>）</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -k</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;login and not admin&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 名称包含 &quot;login&quot; 且不包含 &quot;admin&quot; 的测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-按标记过滤-m" tabindex="-1"><a class="header-anchor" href="#_2-按标记过滤-m"><span><strong>2. 按标记过滤（<code>-m</code>）</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;smoke and db&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 运行同时有 @pytest.mark.smoke 和 @pytest.mark.db 标记的测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-按节点id运行" tabindex="-1"><a class="header-anchor" href="#_3-按节点id运行"><span><strong>3. 按节点ID运行</strong></span></a></h4><p>先获取完整节点ID：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --collect-only</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -q</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 列出所有测试的节点ID</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后执行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/test_api.py::test_login[param1]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 参数化测试的特定参数组合</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="三、常用参数组合" tabindex="-1"><a class="header-anchor" href="#三、常用参数组合"><span><strong>三、常用参数组合</strong></span></a></h3><h4 id="_1-基础组合" tabindex="-1"><a class="header-anchor" href="#_1-基础组合"><span><strong>1. 基础组合</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                  # 显示详细输出（每个测试用例名称）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --tb=short</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 简化错误跟踪信息（可选: auto, long, line, native）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --lf</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                # 仅运行上次失败的测试（--last-failed）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --ff</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                # 先运行上次失败的测试，再执行其他（--failed-first）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-并行加速" tabindex="-1"><a class="header-anchor" href="#_2-并行加速"><span><strong>2. 并行加速</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               # 使用4个进程并行（需安装 pytest-xdist）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> auto</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 自动检测 CPU 核心数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-覆盖率报告" tabindex="-1"><a class="header-anchor" href="#_3-覆盖率报告"><span><strong>3. 覆盖率报告</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cov=my_project</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --cov-report=html</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 生成 HTML 覆盖率报告（需安装 pytest-cov）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="四、实战场景示例" tabindex="-1"><a class="header-anchor" href="#四、实战场景示例"><span><strong>四、实战场景示例</strong></span></a></h3><h4 id="场景-1-快速验证修复的-bug" tabindex="-1"><a class="header-anchor" href="#场景-1-快速验证修复的-bug"><span><strong>场景 1：快速验证修复的 Bug</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --lf</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 仅重跑上次失败的测试，并显示详细信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="场景-2-ci-cd-中的指定模块测试" tabindex="-1"><a class="header-anchor" href="#场景-2-ci-cd-中的指定模块测试"><span><strong>场景 2：CI/CD 中的指定模块测试</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/db/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;not slow&quot;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 执行 db 目录下所有非慢速测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="场景-3-参数化测试的特定用例" tabindex="-1"><a class="header-anchor" href="#场景-3-参数化测试的特定用例"><span><strong>场景 3：参数化测试的特定用例</strong></span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pytest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests/test_api.py::test_search[case1]</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 仅运行参数化为 case1 的测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="五、配置文件预设" tabindex="-1"><a class="header-anchor" href="#五、配置文件预设"><span><strong>五、配置文件预设</strong></span></a></h3><p>在 <code>pytest.ini</code> 中预设常用参数：</p><div class="language-ini line-numbers-mode" data-highlighter="shiki" data-ext="ini" data-title="ini" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># pytest.ini</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">[pytest]</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">addopts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> -v --</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">tb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">short -n auto</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">python_files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> test_*.py check_*.py  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 自定义测试文件匹配模式</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">markers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    smoke: 冒烟测试</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#98C379;">    db: 数据库相关测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span><strong>六、总结</strong></span></a></h3><ul><li><strong>精准定位</strong>：通过路径、节点ID、标记 (<code>-m</code>) 和名称 (<code>-k</code>) 快速筛选测试</li><li><strong>高效执行</strong>：并行 (<code>-n</code>) + 失败优先 (<code>--lf/--ff</code>) 加速反馈循环</li><li><strong>结果分析</strong>：结合 <code>--cov</code> 和 <code>-v</code> 获取详细质量反馈</li></ul><p>灵活组合这些命令参数，可显著提升测试执行效率！ 🚀</p>',48)]))}]]),h=JSON.parse('{"path":"/auto/se/pytest/execute_cmd.html","title":"执行命令","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["UI自动化测试","selenium"],"tag":["selenium","元素定位","pytest","cmd"],"order":5,"sticky":true,"description":"执行命令 以下是 pytest 执行命令的详细指南，涵盖目录、模块、用例筛选及常用参数组合，助你精准控制测试范围： 一、基础执行命令 1. 运行所有测试 默认行为：递归查找当前目录及子目录中所有 test_*.py 和 *_test.py 文件，执行其中以 test_ 开头的函数/方法。 2. 指定测试目录 3. 指定测试模块 4. 指定测试类/方法 ...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/auto/se/pytest/execute_cmd.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"执行命令"}],["meta",{"property":"og:description","content":"执行命令 以下是 pytest 执行命令的详细指南，涵盖目录、模块、用例筛选及常用参数组合，助你精准控制测试范围： 一、基础执行命令 1. 运行所有测试 默认行为：递归查找当前目录及子目录中所有 test_*.py 和 *_test.py 文件，执行其中以 test_ 开头的函数/方法。 2. 指定测试目录 3. 指定测试模块 4. 指定测试类/方法 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-01T15:07:44.000Z"}],["meta",{"property":"article:tag","content":"selenium"}],["meta",{"property":"article:tag","content":"元素定位"}],["meta",{"property":"article:tag","content":"pytest"}],["meta",{"property":"article:tag","content":"cmd"}],["meta",{"property":"article:modified_time","content":"2025-04-01T15:07:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"执行命令\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-01T15:07:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1741710583000,"updatedTime":1743520064000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":3,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":2.4,"words":720},"filePathRelative":"auto/se/pytest/execute_cmd.md","localizedDate":"2025年3月11日","excerpt":"\\n<p>以下是 <strong>pytest 执行命令的详细指南</strong>，涵盖目录、模块、用例筛选及常用参数组合，助你精准控制测试范围：</p>\\n<hr>\\n<h3><strong>一、基础执行命令</strong></h3>\\n<h4><strong>1. 运行所有测试</strong></h4>\\n<div class=\\"language-bash line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"bash\\" data-title=\\"bash\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">pytest</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')},6995:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}}}]);