"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[1022],{191:(e,a,t)=>{t.r(a),t.d(a,{comp:()=>i,data:()=>s});var n=t(6254);const r={},i=(0,t(6995).A)(r,[["render",function(e,a){return(0,n.uX)(),(0,n.CE)("div",null,a[0]||(a[0]=[(0,n.Fv)('<h1 id="jmeter-跨线程组取参数值的方法" tabindex="-1"><a class="header-anchor" href="#jmeter-跨线程组取参数值的方法"><span>Jmeter 跨线程组取参数值的方法</span></a></h1><ul><li>用过 Jmeter 的同学应该都知道，Jmeter 不支持跨线程传递参数</li><li>哎，那我想跨线程传递参数，要咋整呢？别急，接下来我们就来讲解如何不使用代码就可以解决此问题</li><li>官方也有正式说明，所以这并不是 Bug 哦</li></ul><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713102945512-268679554.jpg" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713102945512-268679554.jpg" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">一定要通过 BeanShell 去跨线程组传递参数吗？</p><ul><li>通过百度搜索：Jmeter 跨线程组传递参数</li><li>会看到很多文章都是通过 BeanShell 写代码去实现的</li><li>这对于代码小白极其不友好！</li><li>所以这篇文章将教会大家如何<strong>不需要写代码</strong>去实现跨线程传递参数！</li></ul></div><h2 id="一、定义属性法" tabindex="-1"><a class="header-anchor" href="#一、定义属性法"><span>一、定义属性法</span></a></h2><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h3><ul><li>在Jmeter 中，属性是<strong>全局生效</strong>的，可以动态设置</li><li>但变量是每个线程独有的</li><li>所以通过设置属性可以实现跨线程传参，而不是通过变量的方式</li></ul><h3 id="测试计划结构树" tabindex="-1"><a class="header-anchor" href="#测试计划结构树"><span>测试计划结构树</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713112809505-361272313.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713112809505-361272313.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p><strong>第一步</strong></p><ol><li>添加了三个线程组</li><li>登录需要注册接口返回的手机号</li><li>获取订单列表需要登录接口返回的token，均需要跨线程组传参</li></ol><h3 id="注册接口的-json-提取器" tabindex="-1"><a class="header-anchor" href="#注册接口的-json-提取器"><span>注册接口的 Json 提取器</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713114058764-1468730754.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713114058764-1468730754.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>**第二步：**通过提取器（json、正则、xpath），提取需要跨线程组传递的值</p><h3 id="注册接口的-beanshell-后置处理器" tabindex="-1"><a class="header-anchor" href="#注册接口的-beanshell-后置处理器"><span>注册接口的 BeanShell 后置处理器</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713113934822-1573598535.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713113934822-1573598535.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p><strong>第三步</strong></p><ol><li>添加一个 BeanShell 后置处理器</li><li>添加一个 ${__setProperty()} 函数，按照图片说明写变量名</li></ol><h3 id="登录接口的请求体" tabindex="-1"><a class="header-anchor" href="#登录接口的请求体"><span>登录接口的请求体</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713114416648-92433861.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713114416648-92433861.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p><strong>第四步</strong></p><ol><li>引用第三步在 BeanShell 后置处理器设置的变量名（phone）</li><li>通过 ${__P()} 来读取对应的属性值</li></ol><h3 id="第五步" tabindex="-1"><a class="header-anchor" href="#第五步"><span><strong>第五步</strong></span></a></h3><p>运行脚本！就能发现可以跨线程组传递参数啦</p><h3 id="登录接口的-beanshell-后置处理器" tabindex="-1"><a class="header-anchor" href="#登录接口的-beanshell-后置处理器"><span>登录接口的 BeanShell 后置处理器</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713114729240-1228991514.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713114729240-1228991514.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>一样的步骤，添加 token 属性</p><h3 id="获取订单列表的请求参数" tabindex="-1"><a class="header-anchor" href="#获取订单列表的请求参数"><span>获取订单列表的请求参数</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713114800943-267495909.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713114800943-267495909.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>获取 token 属性</p><h3 id="查看属性显示" tabindex="-1"><a class="header-anchor" href="#查看属性显示"><span>查看属性显示</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713114610417-1356655883.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713114610417-1356655883.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>可以通过属性显示这个控件查看我们在 BeanShell 设置的两个属性名和对应的值（phone、token）</p><h3 id="拓展一下" tabindex="-1"><a class="header-anchor" href="#拓展一下"><span>拓展一下</span></a></h3><p>如果想在一个 BeanShell 设置多个属性，可以这样写哦</p><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713122247543-77420470.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713122247543-77420470.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>每个函数之间用 ; 分开即可（建议分）</p><p>然后可以在属性显示中查看两个不同的属性都会生效</p><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713122528571-1036306610.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713122528571-1036306610.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h2 id="二、文件再转接法" tabindex="-1"><a class="header-anchor" href="#二、文件再转接法"><span>二、文件再转接法</span></a></h2><h3 id="思路-1" tabindex="-1"><a class="header-anchor" href="#思路-1"><span>思路</span></a></h3><p>一个线程组运行结果，存储到文件，另一个线程组，通过csv读取文件，然后再提取文件中需要的值，作为变量输入</p><h3 id="线程组结构树" tabindex="-1"><a class="header-anchor" href="#线程组结构树"><span>线程组结构树</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713163218530-530054763.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713163218530-530054763.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p><strong>第一步</strong></p><ol><li>添加两个线程组，写好接口</li><li>注册接口后面添加<strong>保存响应文件</strong>（在监听器下面）</li></ol><h3 id="注册接口下的保存响应到文件" tabindex="-1"><a class="header-anchor" href="#注册接口下的保存响应到文件"><span>注册接口下的保存响应到文件</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713163224690-2028980819.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713163224690-2028980819.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p><strong>第二步</strong></p><ol><li>设置保存文件的路径和文件名</li><li>记得选项跟着我勾哦，不然生成的文件名就不是你指定的（test.json）</li></ol><h3 id="csv-数据文件设置" tabindex="-1"><a class="header-anchor" href="#csv-数据文件设置"><span>CSV 数据文件设置</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713163231561-1954336458.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713163231561-1954336458.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p><strong>第三步</strong></p><ol><li>在第二个线程组添加 CSV 数据文件设置</li><li>**文件名：**设置刚刚保存的路径</li><li>**分隔符：**json 数据建议填\\t ，可以根据自己的数据结构来定，能取出完整的数据就好了</li></ol><h4 id="看看read-phone-的数据是啥" tabindex="-1"><a class="header-anchor" href="#看看read-phone-的数据是啥"><span>看看read_phone 的数据是啥</span></a></h4><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713163328935-1512513966.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713163328935-1512513966.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>一个 json 数据</p><h3 id="登录接口的请求体-1" tabindex="-1"><a class="header-anchor" href="#登录接口的请求体-1"><span>登录接口的请求体</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713163238520-137993816.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713163238520-137993816.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><p>**第四步：**接口正常引用 json 提取器的变量即可</p><h3 id="登录线程组的结果树" tabindex="-1"><a class="header-anchor" href="#登录线程组的结果树"><span>登录线程组的结果树</span></a></h3><figure><a href="https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713163652182-456130530.png" target="_blank" rel="noopener noreferrer"><img src="/assets/jmeter/1896874-20200713163652182-456130530.png" alt="img" tabindex="0" loading="lazy"></a><figcaption>img</figcaption></figure><h4 id="这里需要注意一点" tabindex="-1"><a class="header-anchor" href="#这里需要注意一点"><span>这里需要注意一点</span></a></h4><p>在真正的请求取样器前面需要加一个调试取样器，上图可以看到第一个取样器无法取到变量值的，<strong>因为提取器都是后置处理器</strong></p><p>所以第二个线程组<strong>元件的执行顺序</strong>会是</p><ol><li>csv 数据文件设置</li><li>调试取样器</li><li>json 提取器</li><li>登录请求</li></ol>',66)]))}]]),s=JSON.parse('{"path":"/jmeter/sundry/get_para_across_thread.html","title":"Jmeter 跨线程组取参数值的方法","lang":"zh-CN","frontmatter":{"description":"Jmeter 跨线程组取参数值的方法 用过 Jmeter 的同学应该都知道，Jmeter 不支持跨线程传递参数 哎，那我想跨线程传递参数，要咋整呢？别急，接下来我们就来讲解如何不使用代码就可以解决此问题 官方也有正式说明，所以这并不是 Bug 哦 imgimg 一定要通过 BeanShell 去跨线程组传递参数吗？ 通过百度搜索：Jmeter 跨线程组...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/sundry/get_para_across_thread.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"Jmeter 跨线程组取参数值的方法"}],["meta",{"property":"og:description","content":"Jmeter 跨线程组取参数值的方法 用过 Jmeter 的同学应该都知道，Jmeter 不支持跨线程传递参数 哎，那我想跨线程传递参数，要咋整呢？别急，接下来我们就来讲解如何不使用代码就可以解决此问题 官方也有正式说明，所以这并不是 Bug 哦 imgimg 一定要通过 BeanShell 去跨线程组传递参数吗？ 通过百度搜索：Jmeter 跨线程组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hekun97.github.io/assets/jmeter/1896874-20200713102945512-268679554.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T15:06:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-30T15:06:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jmeter 跨线程组取参数值的方法\\",\\"image\\":[\\"https://hekun97.github.io/assets/jmeter/1896874-20200713102945512-268679554.jpg\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713112809505-361272313.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713114058764-1468730754.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713113934822-1573598535.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713114416648-92433861.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713114729240-1228991514.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713114800943-267495909.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713114610417-1356655883.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713122247543-77420470.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713122528571-1036306610.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713163218530-530054763.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713163224690-2028980819.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713163231561-1954336458.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713163328935-1512513966.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713163238520-137993816.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200713163652182-456130530.png\\"],\\"dateModified\\":\\"2025-03-30T15:06:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1743347198000,"updatedTime":1743347198000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":1,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":3.63,"words":1089},"filePathRelative":"jmeter/sundry/get_para_across_thread.md","localizedDate":"2025年3月30日","excerpt":"\\n<ul>\\n<li>用过 Jmeter 的同学应该都知道，Jmeter 不支持跨线程传递参数</li>\\n<li>哎，那我想跨线程传递参数，要咋整呢？别急，接下来我们就来讲解如何不使用代码就可以解决此问题</li>\\n<li>官方也有正式说明，所以这并不是 Bug 哦</li>\\n</ul>\\n<figure><a href=\\"https://img2020.cnblogs.com/blog/1896874/202007/1896874-20200713102945512-268679554.jpg\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src=\\"/assets/jmeter/1896874-20200713102945512-268679554.jpg\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"></a><figcaption>img</figcaption></figure>","autoDesc":true}')},6995:(e,a)=>{a.A=(e,a)=>{const t=e.__vccOpts||e;for(const[e,n]of a)t[e]=n;return t}}}]);