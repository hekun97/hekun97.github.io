"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[8476],{3113:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>n,data:()=>r});var s=t(6254);const a={},n=(0,t(6995).A)(a,[["render",function(e,i){return(0,s.uX)(),(0,s.CE)("div",null,i[0]||(i[0]=[(0,s.Fv)('<h1 id="测试计划概述" tabindex="-1"><a class="header-anchor" href="#测试计划概述"><span>测试计划概述</span></a></h1><h2 id="一、测试计划的作用" tabindex="-1"><a class="header-anchor" href="#一、测试计划的作用"><span>一、测试计划的作用</span></a></h2><ul><li>测试计划描述了 Jmeter 在执行时，一系列的步骤</li><li>一个完整的测试计划包含了一个或多个【线程组、逻辑控制器、采样器、监听器、定时器、断言和配置元素】</li></ul><h2 id="二、添加元件" tabindex="-1"><a class="header-anchor" href="#二、添加元件"><span>二、添加元件</span></a></h2><figure><img src="/assets/jmeter/1896874-20200426132704174-1329470436.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>通过右键点击树中的元件，选中要添加的元件</li><li>也可以通过合并（merge）或打开（open）从文件中加载和添加元件</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>树中的每一个控件都能通过右边内容区显示</li><li>树中的每一个控件都能在树中随意拖动</li></ul></div><h2 id="三、运行测试计划" tabindex="-1"><a class="header-anchor" href="#三、运行测试计划"><span>三、运行测试计划</span></a></h2><ul><li>可以通过<code>ctrl+r</code>运行测试计划</li><li></li></ul><figure><img src="/assets/jmeter/1896874-20200426135000017-777407546.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>通过右侧的数字查看<strong>活动线程数/线程总数</strong>，这仅适用于本地运行的测试</li><li>分布式压测（使用客户端-服务器模式）时，master机不会显示所有远程salve机的线程总数。</li></ul></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>仅在<strong>调试</strong>测试计划时，才应该使用上面的 GUI 模式**【界面模式】<strong>，如果实际运行</strong>负载测试<strong>的时候，应该使用CLI模式</strong>【命令行模式、无界面模式】**</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 测试计划与结果，都在 %JMeter_Home%/bin 目录</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jmeter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test1.jmx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> result.jtl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>后续补充链接。</p></div><h2 id="四、暂停运行测试计划" tabindex="-1"><a class="header-anchor" href="#四、暂停运行测试计划"><span>四、暂停运行测试计划</span></a></h2><figure><img src="/assets/jmeter/1896874-20200426141238109-361881862.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>两种暂停方式</p><ul><li><strong>硬中断（stop threads）</strong>：停止线程（ctrl + .）</li><li><strong>软中断（shutdown threads）</strong>：关闭线程（ctrl + ,）</li></ul><h3 id="stop-threads" tabindex="-1"><a class="header-anchor" href="#stop-threads"><span>stop threads</span></a></h3><ul><li>许多采样器（Samplers）都是可中断的，这意味着可以提前终止活动采样</li><li>stop命令将检查所有线程是否已在默认超时（即5000 ms = 5秒）内停止</li><li>如果有线程还没被停止，则会发送一条信息；此时可以再发送一次 stop 命令，但如果还是失败的话，就得退出 Jmeter 来清理</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>上述说的默认超时可以通过修改Jmeter配置文件（<code> jmeter.properties</code>）来改变</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Number of milliseconds to wait for a thread to stop</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;">jmeterengine.threadstop.wait</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#98C379;"> 5000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="shutdown-threads" tabindex="-1"><a class="header-anchor" href="#shutdown-threads"><span>shutdown threads</span></a></h3><ul><li>线程会在当前运行任务结束后停止，<strong>不会中断</strong>活动线程正在执行的任务</li><li>会出现一个【正在停止测试】的窗口（如下图），直到所有线程都运行完成了才会关闭</li><li>如果停止时间太久，也可以直接发【stop】命令</li></ul><figure><img src="/assets/jmeter/1896874-20200426141455471-928434893.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>在<strong>Linux CLI</strong>模式下，是没有快捷键来停止线程运行的，所以Jmeter 在 CLI模式下会监听特定端口上的命令（默认端口4445，可以通过修改配置文件（<code> jmeter.properties</code>）中的属性 <code>jmeterengine.nongui.port</code> 修改）</li><li>如果 4445 端口被占用了（比如，另一个Jmeter实例用了），Jmeter 将尝试监听下一个更高的端口，直到到达Jmeter属性 <code>jmeterengine.nongui.maxport </code>为止，该属性默认为4455</li></ul></div><h2 id="五、在cli模式下-如何停止线程执行" tabindex="-1"><a class="header-anchor" href="#五、在cli模式下-如何停止线程执行"><span>五、在CLI模式下，如何停止线程执行</span></a></h2><p>在bin目录下，运行脚本</p><ol><li><strong>硬中断</strong>：<code>stoptest.cmd</code> / <code>stoptest.sh</code></li><li><strong>软中断</strong>：<code>shutdown.cmd</code> / <code>shutdown.sh</code></li></ol><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只有同一个 host 下运行的脚本，JMeter 才会接受。</p></div>',27)]))}]]),r=JSON.parse('{"path":"/jmeter/guide/test_plan/intro.html","title":"测试计划概述","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["JMeter"],"tag":["测试计划","概述"],"order":1,"sticky":true,"description":"测试计划概述 一、测试计划的作用 测试计划描述了 Jmeter 在执行时，一系列的步骤 一个完整的测试计划包含了一个或多个【线程组、逻辑控制器、采样器、监听器、定时器、断言和配置元素】 二、添加元件 imgimg 通过右键点击树中的元件，选中要添加的元件 也可以通过合并（merge）或打开（open）从文件中加载和添加元件 提示 树中的每一个控件都能通...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/guide/test_plan/intro.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"测试计划概述"}],["meta",{"property":"og:description","content":"测试计划概述 一、测试计划的作用 测试计划描述了 Jmeter 在执行时，一系列的步骤 一个完整的测试计划包含了一个或多个【线程组、逻辑控制器、采样器、监听器、定时器、断言和配置元素】 二、添加元件 imgimg 通过右键点击树中的元件，选中要添加的元件 也可以通过合并（merge）或打开（open）从文件中加载和添加元件 提示 树中的每一个控件都能通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://hekun97.github.io/assets/jmeter/1896874-20200426132704174-1329470436.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-28T17:43:32.000Z"}],["meta",{"property":"article:tag","content":"测试计划"}],["meta",{"property":"article:tag","content":"概述"}],["meta",{"property":"article:modified_time","content":"2025-03-28T17:43:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"测试计划概述\\",\\"image\\":[\\"https://hekun97.github.io/assets/jmeter/1896874-20200426132704174-1329470436.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200426135000017-777407546.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200426141238109-361881862.png\\",\\"https://hekun97.github.io/assets/jmeter/1896874-20200426141455471-928434893.png\\"],\\"dateModified\\":\\"2025-03-28T17:43:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1742745308000,"updatedTime":1743183812000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":2,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"jmeter/guide/test_plan/intro.md","localizedDate":"2025年3月23日","excerpt":"\\n<h2>一、测试计划的作用</h2>\\n<ul>\\n<li>测试计划描述了 Jmeter 在执行时，一系列的步骤</li>\\n<li>一个完整的测试计划包含了一个或多个【线程组、逻辑控制器、采样器、监听器、定时器、断言和配置元素】</li>\\n</ul>\\n<h2>二、添加元件</h2>\\n<figure><img src=\\"/assets/jmeter/1896874-20200426132704174-1329470436.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<ul>\\n<li>通过右键点击树中的元件，选中要添加的元件</li>\\n<li>也可以通过合并（merge）或打开（open）从文件中加载和添加元件</li>\\n</ul>","autoDesc":true}')},6995:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,s]of i)t[e]=s;return t}}}]);