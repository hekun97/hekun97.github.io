"use strict";(self.webpackChunkcaelis_terra=self.webpackChunkcaelis_terra||[]).push([[9309],{2210:(t,e,l)=>{l.r(e),l.d(e,{comp:()=>i,data:()=>s});var r=l(6254);const n={},i=(0,l(6995).A)(n,[["render",function(t,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="学习路线" tabindex="-1"><a class="header-anchor" href="#学习路线"><span>学习路线</span></a></h1><p>学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议：</p><hr><h2 id="阶段一-基础入门" tabindex="-1"><a class="header-anchor" href="#阶段一-基础入门"><span><strong>阶段一：基础入门</strong></span></a></h2><ol><li><strong>理解性能测试基础</strong><ul><li>性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。</li><li>核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。</li><li>常见性能问题：内存泄漏、线程阻塞、数据库锁等。</li></ul></li><li><strong>JMeter入门介绍</strong><ul><li>JMeter支持哪些测试场景？</li><li>JMeter有哪些特征？</li><li>JMetert的扩展性体现在哪里？</li><li>JMeter实际使用场景</li></ul></li><li><strong>JMeter 安装与配置</strong><ul><li>下载并安装 Java（JMeter 依赖 Java 环境）。</li><li>下载 JMeter 并解压，更改语言为中文，配置环境变量（可选）。</li><li>熟悉JMeter目录结构。</li></ul></li><li><strong>启动 JMeter GUI</strong>。 <ul><li>熟悉 JMeter GUI界面布局。</li><li>熟悉元件和组件。</li><li>熟悉变量和属性。</li></ul></li><li><strong>第一个测试计划</strong><ul><li>创建线程组（Thread Group）并配置并发用户数、循环次数。</li><li>添加 HTTP 请求元件，配置协议、服务器地址、路径。</li><li>添加监听器（如 View Results Tree、Summary Report）查看结果。</li></ul></li></ol><hr><h2 id="阶段二-核心功能学习" tabindex="-1"><a class="header-anchor" href="#阶段二-核心功能学习"><span>阶段二：核心功能学习</span></a></h2><ol><li><p><strong>JMeter 核心元件</strong></p><table><thead><tr><th style="text-align:center;"><strong>类别</strong></th><th style="text-align:center;"><strong>元件名称</strong></th><th style="text-align:center;"><strong>优先级</strong></th><th style="text-align:center;"><strong>用途说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><strong>线程组</strong></td><td style="text-align:center;">Thread Group</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">设置并发用户数、启动时间、循环次数。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">Ultimate Thread Group</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">阶梯/波浪式加压（需插件）。</td></tr><tr><td style="text-align:center;"><strong>取样器</strong></td><td style="text-align:center;">HTTP Request</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">发送 HTTP/HTTPS 请求，支持 GET/POST。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">JDBC Request</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">执行 SQL 语句，压测数据库性能。</td></tr><tr><td style="text-align:center;"><strong>监听器</strong></td><td style="text-align:center;">Aggregate Report</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">汇总关键指标（TPS、响应时间、错误率）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">View Results Tree</td><td style="text-align:center;">⚠️</td><td style="text-align:center;">查看请求详情（正式压测需禁用）。</td></tr><tr><td style="text-align:center;"><strong>配置元件</strong></td><td style="text-align:center;">CSV Data Set Config</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">参数化测试数据（如多用户登录）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">HTTP Request Defaults</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">统一配置 HTTP 请求的公共参数（域名、端口）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">HTTP Cookie Manager</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">自动管理 Cookies，模拟用户会话。</td></tr><tr><td style="text-align:center;"><strong>逻辑控制器</strong></td><td style="text-align:center;">Loop Controller</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">循环执行子元件（如重复提交订单）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">If Controller</td><td style="text-align:center;">✅</td><td style="text-align:center;">根据条件控制请求执行（如响应码=200）。</td></tr><tr><td style="text-align:center;"><strong>前置/后置处理器</strong></td><td style="text-align:center;">Regular Expression Extractor</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">正则提取响应数据（如 Token）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">JSON Extractor</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">提取 JSON 字段（比正则更高效）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">JSR223 PreProcessor</td><td style="text-align:center;">✅</td><td style="text-align:center;">用 Groovy 脚本生成动态参数（如时间戳、签名）。</td></tr><tr><td style="text-align:center;"><strong>断言</strong></td><td style="text-align:center;">Response Assertion</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">验证响应内容、状态码是否匹配预期。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">Duration Assertion</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">检查请求响应时间是否超阈值。</td></tr><tr><td style="text-align:center;"><strong>定时器</strong></td><td style="text-align:center;">Constant Timer</td><td style="text-align:center;">⭐️</td><td style="text-align:center;">固定间隔等待（如每次请求后等待 1 秒）。</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">Synchronizing Timer</td><td style="text-align:center;">✅</td><td style="text-align:center;">实现多用户并发触发（如秒杀场景）。</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li><strong>优先级说明</strong>： <ul><li>⭐️ 必学：基础测试场景必备元件。</li><li>✅ 进阶：复杂场景扩展功能，建议掌握基础后学习。</li><li>⚠️ 调试用：正式压测时需禁用（避免内存问题）。</li></ul></li><li><strong>学习顺序建议</strong>： <ul><li>先掌握 <strong>必学元件</strong>（线程组、HTTP 请求、CSV 参数化、断言）。</li><li>再学习 <strong>进阶元件</strong>（JSON 提取器、逻辑控制器、定时器）。</li></ul></li><li><strong>效率提升技巧</strong>： <ul><li>使用 <strong>HTTP Request Defaults</strong> 减少重复配置。</li><li>优先选择 <strong>JSON Extractor</strong> 替代正则表达式（效率更高）。</li><li>正式压测时用命令行模式：<code>jmeter -n -t test.jmx -l result.jtl</code>。</li></ul></li></ol></div></li><li><p><strong>参数化与动态数据</strong></p><ul><li>使用 CSV 文件实现参数化（如多用户登录）。</li><li>通过函数助手（__Random、__time）生成动态数据。</li><li>利用变量和属性（Properties）跨线程组传递数据。</li></ul></li><li><p><strong>监听器与结果分析</strong></p><ul><li>常用监听器：Aggregate Report、Response Time Graph、HTML Dashboard。</li><li>生成 HTML 报告：<code>jmeter -n -t test.jmx -l result.jtl -e -o report/</code>。</li><li>分析关键指标：平均响应时间、99% Line、错误率。</li></ul></li></ol><hr><h2 id="阶段三-脚本开发与调试" tabindex="-1"><a class="header-anchor" href="#阶段三-脚本开发与调试"><span><strong>阶段三：脚本开发与调试</strong></span></a></h2><ol><li><p><strong>复杂场景设计</strong></p><ul><li>混合场景：模拟登录、浏览、下单等组合操作。</li><li>分布式测试：使用多台机器作为 JMeter 压力机（Master-Slave 模式）。</li><li>使用逻辑控制器实现条件分支（如用户是否登录成功）。</li></ul></li><li><p><strong>关联与动态数据处理</strong></p><ul><li>提取 JSON/XML 响应中的动态值（如 Token）并传递给后续请求。</li><li>使用正则表达式或 JSON Extractor 实现动态关联。</li></ul></li><li><p><strong>调试与优化</strong></p><ul><li>使用 Debug Sampler 查看变量和参数。</li><li>禁用监听器以减少资源消耗（正式压测时避免使用 View Results Tree）。</li><li>调整 JVM 参数优化 JMeter 自身性能。</li></ul></li></ol><hr><h2 id="阶段四-高级应用" tabindex="-1"><a class="header-anchor" href="#阶段四-高级应用"><span><strong>阶段四：高级应用</strong></span></a></h2><ol><li><p><strong>分布式测试与云压测</strong></p><ul><li>配置多台 JMeter Slave 机器，通过 Master 控制。</li><li>使用云服务（如 AWS、BlazeMeter）进行大规模压测。</li></ul></li><li><p><strong>持续集成（CI/CD）</strong></p><ul><li>集成 Jenkins：通过 Jenkins 插件自动执行 JMeter 脚本。</li><li>生成趋势报告并与团队共享。</li></ul></li><li><p><strong>扩展功能</strong></p><ul><li>编写自定义 BeanShell/Groovy 脚本（如复杂逻辑处理）。</li><li>开发 JMeter 插件（如自定义监听器或取样器）。</li><li>使用 JSR223 脚本提升性能（优先选 Groovy）。</li></ul></li></ol><hr><h2 id="阶段五-实战与优化" tabindex="-1"><a class="header-anchor" href="#阶段五-实战与优化"><span><strong>阶段五：实战与优化</strong></span></a></h2><ol><li><p><strong>典型场景实战</strong></p><ul><li><strong>Web 应用压测</strong>：处理 Cookies、Session、动态资源（CSS/JS）。</li><li><strong>API 压测</strong>：RESTful API、GraphQL、WebSocket。</li><li><strong>数据库压测</strong>：通过 JDBC 压测 SQL 性能。</li><li><strong>消息队列测试</strong>：集成 Kafka/RabbitMQ。</li></ul></li><li><p><strong>瓶颈定位与调优</strong></p><ul><li>结合监控工具（如 Grafana + Prometheus）分析服务器资源。</li><li>使用 JProfiler 或 Arthas 分析 Java 应用性能。</li><li>优化代码、SQL 查询、缓存策略或硬件配置。</li></ul></li></ol><hr><h2 id="学习资源推荐" tabindex="-1"><a class="header-anchor" href="#学习资源推荐"><span><strong>学习资源推荐</strong></span></a></h2><ul><li><strong>官方文档</strong>：<a href="https://jmeter.apache.org/usermanual/index.html" target="_blank" rel="noopener noreferrer">JMeter User Manual</a></li><li><strong>教程</strong>： <ul><li>Udemy 课程《JMeter Performance Testing》</li><li>YouTube 频道：JMeter Tutorials by The Testing Academy</li></ul></li><li><strong>书籍</strong>： <ul><li>《JMeter Cookbook》</li><li>《Performance Testing with JMeter 5》</li></ul></li><li><strong>社区</strong>： <ul><li>JMeter 官方论坛、Stack Overflow、GitHub 开源项目。</li></ul></li></ul><hr><h2 id="常见避坑指南" tabindex="-1"><a class="header-anchor" href="#常见避坑指南"><span><strong>常见避坑指南</strong></span></a></h2><ul><li>避免在 GUI 模式下执行压测（使用命令行模式：<code>jmeter -n -t test.jmx -l log.jtl</code>）。</li><li>线程数设置需逐步递增，避免瞬间高并发导致服务崩溃。</li><li>使用 CSV 文件参数化时，注意文件路径和编码格式。</li><li>压测前关闭不必要的监听器，减少内存占用。</li></ul><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>通过以上路线逐步实践，配合项目实战（如电商秒杀、API 高并发场景），可以系统掌握 JMeter 性能测试的核心能力。</p>',26)]))}]]),s=JSON.parse('{"path":"/jmeter/study.html","title":"学习路线","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["性能测试"],"tag":["basic","study"],"order":1,"sticky":true,"description":"学习路线 学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议： 阶段一：基础入门 理解性能测试基础 性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。 核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。 常见性能问题：内存泄漏、线程阻塞、数据库锁等。 JMet...","head":[["meta",{"property":"og:url","content":"https://hekun97.github.io/jmeter/study.html"}],["meta",{"property":"og:site_name","content":"专业治头秃"}],["meta",{"property":"og:title","content":"学习路线"}],["meta",{"property":"og:description","content":"学习路线 学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议： 阶段一：基础入门 理解性能测试基础 性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。 核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。 常见性能问题：内存泄漏、线程阻塞、数据库锁等。 JMet..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-30T15:06:38.000Z"}],["meta",{"property":"article:tag","content":"basic"}],["meta",{"property":"article:tag","content":"study"}],["meta",{"property":"article:modified_time","content":"2025-03-30T15:06:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"学习路线\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-30T15:06:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"专业治头秃\\",\\"url\\":\\"https://github.com/hekun97\\"}]}"]]},"git":{"createdTime":1742139779000,"updatedTime":1743347198000,"contributors":[{"name":"hekun97","username":"hekun97","email":"hek97@qq.com","commits":4,"url":"https://github.com/hekun97"}]},"readingTime":{"minutes":5.06,"words":1519},"filePathRelative":"jmeter/study.md","localizedDate":"2025年3月16日","excerpt":"\\n<p>学习 JMeter 进行性能测试的路线可以分阶段规划，以下是系统化的学习路径建议：</p>\\n<hr>\\n<h2><strong>阶段一：基础入门</strong></h2>\\n<ol>\\n<li><strong>理解性能测试基础</strong>\\n<ul>\\n<li>性能测试类型：负载测试、压力测试、并发测试、稳定性测试等。</li>\\n<li>核心指标：响应时间、并发数、吞吐量（TPS、QPS）、错误率、点击数、资源利用率（CPU/内存/网络）等。</li>\\n<li>常见性能问题：内存泄漏、线程阻塞、数据库锁等。</li>\\n</ul>\\n</li>\\n<li><strong>JMeter入门介绍</strong>\\n<ul>\\n<li>JMeter支持哪些测试场景？</li>\\n<li>JMeter有哪些特征？</li>\\n<li>JMetert的扩展性体现在哪里？</li>\\n<li>JMeter实际使用场景</li>\\n</ul>\\n</li>\\n<li><strong>JMeter 安装与配置</strong>\\n<ul>\\n<li>下载并安装 Java（JMeter 依赖 Java 环境）。</li>\\n<li>下载 JMeter 并解压，更改语言为中文，配置环境变量（可选）。</li>\\n<li>熟悉JMeter目录结构。</li>\\n</ul>\\n</li>\\n<li><strong>启动 JMeter GUI</strong>。\\n<ul>\\n<li>熟悉 JMeter GUI界面布局。</li>\\n<li>熟悉元件和组件。</li>\\n<li>熟悉变量和属性。</li>\\n</ul>\\n</li>\\n<li><strong>第一个测试计划</strong>\\n<ul>\\n<li>创建线程组（Thread Group）并配置并发用户数、循环次数。</li>\\n<li>添加 HTTP 请求元件，配置协议、服务器地址、路径。</li>\\n<li>添加监听器（如 View Results Tree、Summary Report）查看结果。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')},6995:(t,e)=>{e.A=(t,e)=>{const l=t.__vccOpts||t;for(const[t,r]of e)l[t]=r;return l}}}]);